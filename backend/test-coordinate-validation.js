/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–¥–º–µ–Ω—ã GPS
 */

const CoordinateValidator = require('./utils/coordinateValidator');
const CoordinateProcessor = require('./utils/coordinateProcessor');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testScenarios = {
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä—è–¥–æ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º –º–µ—Å—Ç–æ–º
    normal: {
        name: "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        expectedCoords: [55.7558, 37.6173], // –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
        positions: [
            { coords: [55.7560, 37.6175], timestamp: new Date('2024-01-01T10:00:00Z') },
            { coords: [55.7559, 37.6174], timestamp: new Date('2024-01-01T10:01:00Z') },
            { coords: [55.7558, 37.6173], timestamp: new Date('2024-01-01T10:02:00Z') },
            { coords: [55.7557, 37.6172], timestamp: new Date('2024-01-01T10:03:00Z') }
        ]
    },

    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ (—è–≤–Ω–∞—è –ø–æ–¥–¥–µ–ª–∫–∞)
    teleportation: {
        name: "–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
        expectedCoords: [55.7558, 37.6173], // –ú–æ—Å–∫–≤–∞
        positions: [
            { coords: [55.7560, 37.6175], timestamp: new Date('2024-01-01T10:00:00Z') },
            { coords: [59.9311, 30.3609], timestamp: new Date('2024-01-01T10:01:00Z') }, // –ü–∏—Ç–µ—Ä
            { coords: [55.7558, 37.6173], timestamp: new Date('2024-01-01T10:02:00Z') }
        ]
    },

    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–¥–≤–∏–≥ (–≥–ª—É—à–∏–ª–∫–∞)
    consistentShift: {
        name: "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–¥–≤–∏–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≥–ª—É—à–∏–ª–∫–∞)",
        expectedCoords: [55.7558, 37.6173], // –û–∂–∏–¥–∞–µ–º–æ–µ –º–µ—Å—Ç–æ
        positions: [
            { coords: [55.7658, 37.6273], timestamp: new Date('2024-01-01T10:00:00Z') }, // +0.01, +0.01
            { coords: [55.7659, 37.6274], timestamp: new Date('2024-01-01T10:01:00Z') }, // +0.01, +0.01
            { coords: [55.7657, 37.6272], timestamp: new Date('2024-01-01T10:02:00Z') }, // +0.01, +0.01
            { coords: [55.7658, 37.6273], timestamp: new Date('2024-01-01T10:03:00Z') }  // +0.01, +0.01
        ]
    },

    // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    suspiciousAccuracy: {
        name: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
        expectedCoords: [55.7558, 37.6173],
        positions: [
            { coords: [55.7560000000, 37.6175000000], timestamp: new Date('2024-01-01T10:00:00Z') },
            { coords: [55.7550000000, 37.6170000000], timestamp: new Date('2024-01-01T10:01:00Z') },
            { coords: [55.7558000000, 37.6173000000], timestamp: new Date('2024-01-01T10:02:00Z') }
        ]
    },

    // –°—Ü–µ–Ω–∞—Ä–∏–π 5: –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏ (–Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –≤ –≥–æ—Ä–æ–¥–µ)
    straightLine: {
        name: "–î–≤–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏",
        expectedCoords: [55.7558, 37.6173],
        positions: [
            { coords: [55.7550, 37.6170], timestamp: new Date('2024-01-01T10:00:00Z') },
            { coords: [55.7552, 37.6171], timestamp: new Date('2024-01-01T10:01:00Z') },
            { coords: [55.7554, 37.6172], timestamp: new Date('2024-01-01T10:02:00Z') },
            { coords: [55.7556, 37.6173], timestamp: new Date('2024-01-01T10:03:00Z') },
            { coords: [55.7558, 37.6174], timestamp: new Date('2024-01-01T10:04:00Z') }
        ]
    }
};

async function runValidationTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...\n');

    const validator = new CoordinateValidator({
        maxAllowedDeviationKm: 2.0, // 2 –∫–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        consistentShiftThreshold: 0.005, // ~500–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞
        suspiciousAccuracyThreshold: 0.00001,
        teleportationMultiplier: 2
    });

    for (const [scenarioKey, scenario] of Object.entries(testScenarios)) {
        console.log(`üìã –¢–µ—Å—Ç: ${scenario.name}`);
        console.log(`   –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${scenario.expectedCoords.join(', ')}]`);
        
        let previousPositions = [];
        
        for (let i = 0; i < scenario.positions.length; i++) {
            const position = scenario.positions[i];
            
            const context = {
                expectedCoords: scenario.expectedCoords,
                previousPositions: previousPositions.slice(-5),
                lastPosition: previousPositions.length > 0 ? previousPositions[previousPositions.length - 1] : null,
                timeDiff: previousPositions.length > 0 ? 
                    Math.abs(position.timestamp - previousPositions[previousPositions.length - 1].timestamp) : null,
                maxSpeedKmh: 60,
                recentPositions: scenario.positions.slice(0, i)
            };

            const validation = validator.validateCoordinates(position.coords, context);
            const actions = validator.getRecommendedActions(validation);

            console.log(`   üîç –ü–æ–∑–∏—Ü–∏—è ${i + 1}: [${position.coords.join(', ')}]`);
            console.log(`      ‚ö° –†–∏—Å–∫: ${validation.riskLevel}`);
            console.log(`      ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${validation.warnings.join(', ') || '–Ω–µ—Ç'}`);
            console.log(`      ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ: ${actions.accept ? '–ø—Ä–∏–Ω—è—Ç–æ' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}${actions.flagForReview ? ' (–ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)' : ''}`);
            console.log(`      üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${actions.message}`);

            if (validation.details && validation.details.deviation) {
                console.log(`      üìè –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${validation.details.deviation.distance.toFixed(2)} –∫–º`);
            }

            if (validation.details && validation.details.consistentShift) {
                const shift = validation.details.consistentShift;
                if (shift.isConsistent) {
                    console.log(`      üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–¥–≤–∏–≥: ${shift.avgShiftKm.toFixed(2)} –∫–º (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(shift.confidence * 100).toFixed(1)}%)`);
                }
            }

            if (validation.details && validation.details.teleportation) {
                const teleport = validation.details.teleportation;
                if (teleport.isTeleportation) {
                    console.log(`      üöÅ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è: ${teleport.distance.toFixed(2)} –∫–º –∑–∞ ${teleport.timeDiffHours.toFixed(2)} —á (—Å–∫–æ—Ä–æ—Å—Ç—å: ${teleport.actualSpeed.toFixed(1)} –∫–º/—á)`);
                }
            }

            if (actions.accept) {
                previousPositions.push(position);
            }

            console.log('');
        }

        console.log('‚îÄ'.repeat(80));
        console.log('');
    }
}

async function runProcessorTests() {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ CoordinateProcessor...\n');

    const processor = new CoordinateProcessor({
        enableValidation: true,
        enableAdaptiveMode: true,
        maxAllowedDeviationKm: 2.0
    });

    // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const testPositions = testScenarios.consistentShift.positions;
    const validationContext = {
        expectedCoords: testScenarios.consistentShift.expectedCoords,
        maxAllowedDeviationKm: 2.0
    };

    console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π...');
    const result = processor.processCoordinates(testPositions, validationContext);

    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${testPositions.length}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${result.processedPositions.length}`);
    
    if (result.validationSummary) {
        const stats = result.validationSummary.stats;
        console.log(`   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`);
        console.log(`      - –ü—Ä–∏–Ω—è—Ç–æ: ${stats.accepted}`);
        console.log(`      - –ü–æ–º–µ—á–µ–Ω–æ: ${stats.flagged}`);
        console.log(`      - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejected}`);
        console.log(`      - –ò—Ç–æ–≥–æ: ${stats.total}`);

        if (result.validationSummary.highRiskPositions.length > 0) {
            console.log(`   üö® –ü–æ–∑–∏—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: ${result.validationSummary.highRiskPositions.length}`);
        }

        if (result.validationSummary.flaggedPositions.length > 0) {
            console.log(`   ‚ö†Ô∏è  –ü–æ–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: ${result.validationSummary.flaggedPositions.length}`);
        }
    }

    if (result.movementAnalysis) {
        console.log(`   üéØ –¢–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è: ${result.movementAnalysis.type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.movementAnalysis.confidence * 100).toFixed(1)}%)`);
    }

    console.log('');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('='.repeat(80));
    console.log('');

    try {
        await runValidationTests();
        await runProcessorTests();
        
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = { runValidationTests, runProcessorTests }; 