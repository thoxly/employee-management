/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–µ—Å—Å–∏–π
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç CoordinateProcessor —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
 */

const db = require('../db');
const CoordinateProcessor = require('../utils/coordinateProcessor');
const { fromDatabase } = require('../utils/coordinates');

class CoordinateProcessingService {
    constructor() {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
        this.processor = new CoordinateProcessor({
            enableAdaptiveMode: true, // –≤–∫–ª—é—á–µ–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            maxSpeedKmh: 100,        // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 100 –∫–º/—á (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
            minSpeedKmh: 0.1,        // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 0.1 –∫–º/—á (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
            clusterRadiusMeters: 20, // —Ä–∞–¥–∏—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞ 20 –º–µ—Ç—Ä–æ–≤ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
            timeWindowMs: 30000,     // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ 30 —Å–µ–∫—É–Ω–¥ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
            minPointsForMedian: 3    // –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –º–µ–¥–∏–∞–Ω—ã (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
     */
    async getSessionPositions(sessionId) {
        try {
            const query = `
                SELECT
                    latitude,
                    longitude,
                    timestamp
                FROM positions
                WHERE session_id = $1
                ORDER BY timestamp ASC
            `;

            const { rows } = await db.query(query, [sessionId]);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            return rows.map(row => ({
                coords: fromDatabase(row),
                timestamp: new Date(row.timestamp)
            }));
        } catch (error) {
            console.error('‚ùå Error getting session positions:', error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Å—Å–∏–∏
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async processSessionCoordinates(sessionId) {
        try {
            console.log(`üîÑ Processing coordinates for session ${sessionId}`);

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            const originalPositions = await this.getSessionPositions(sessionId);

            if (originalPositions.length === 0) {
                return {
                    sessionId,
                    originalPositions: [],
                    processedPositions: [],
                    movementAnalysis: null,
                    validationSummary: null,
                    stats: {
                        originalCount: 0,
                        processedCount: 0,
                        reductionPercent: 0,
                        originalDistance: 0,
                        processedDistance: 0,
                        distanceChangePercent: 0
                    }
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const validationContext = await this.getValidationContext(sessionId);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            const result = this.processor.processCoordinates(originalPositions, validationContext);

            console.log(`‚úÖ Session ${sessionId} processing completed:`, result.stats);
            if (result.movementAnalysis) {
                console.log(`üéØ Detected movement type: ${result.movementAnalysis.type} (confidence: ${(result.movementAnalysis.confidence * 100).toFixed(1)}%)`);
            }
            if (result.validationSummary) {
                console.log(`üîç Validation summary: ${result.validationSummary.stats.rejected} rejected, ${result.validationSummary.stats.flagged} flagged`);
            }

            return {
                sessionId,
                originalPositions,
                processedPositions: result.processedPositions,
                movementAnalysis: result.movementAnalysis,
                validationSummary: result.validationSummary,
                stats: result.stats
            };
        } catch (error) {
            console.error(`‚ùå Error processing session ${sessionId} coordinates:`, error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Å—Å–∏–π
     * @param {Array} sessionIds - –º–∞—Å—Å–∏–≤ ID —Å–µ—Å—Å–∏–π
     * @returns {Promise<Array>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async processMultipleSessions(sessionIds) {
        const results = [];

        for (const sessionId of sessionIds) {
            try {
                const result = await this.processSessionCoordinates(sessionId);
                results.push(result);
            } catch (error) {
                console.error(`‚ùå Error processing session ${sessionId}:`, error);
                results.push({
                    sessionId,
                    error: error.message,
                    originalPositions: [],
                    processedPositions: [],
                    movementAnalysis: null,
                    stats: null
                });
            }
        }

        return results;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã
     */
    async getProcessedCoordinatesForMap(sessionId) {
        try {
            const result = await this.processSessionCoordinates(sessionId);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã
            return result.processedPositions.map(pos => ({
                latitude: pos.coords[0],
                longitude: pos.coords[1],
                timestamp: pos.timestamp,
                originalCount: pos.originalCount || 1
            }));
        } catch (error) {
            console.error(`‚ùå Error getting processed coordinates for map:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏–∏
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
     */
    async getSessionStats(sessionId) {
        try {
            const result = await this.processSessionCoordinates(sessionId);

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
            const sessionQuery = `
                SELECT
                    s.id,
                    s.user_id,
                    s.task_id,
                    s.start_time,
                    s.end_time,
                    s.is_active,
                    u.full_name as user_name,
                    t.title as task_title
                FROM sessions s
                LEFT JOIN users u ON s.user_id = u.id
                LEFT JOIN tasks t ON s.task_id = t.id
                WHERE s.id = $1
            `;

            const { rows } = await db.query(sessionQuery, [sessionId]);
            const sessionInfo = rows[0];

            return {
                sessionInfo,
                processingStats: result.stats,
                movementAnalysis: result.movementAnalysis,
                originalCount: result.originalPositions.length,
                processedCount: result.processedPositions.length
            };
        } catch (error) {
            console.error(`‚ùå Error getting session stats:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏
     * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
     * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º –∑–∞–¥–∞—á–∏
     */
    async getTaskProcessedCoordinates(taskId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
            const sessionsQuery = `
                SELECT id FROM sessions
                WHERE task_id = $1
                ORDER BY start_time ASC
            `;

            const { rows } = await db.query(sessionsQuery, [taskId]);
            const sessionIds = rows.map(row => row.id);

            if (sessionIds.length === 0) {
                return [];
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            const results = await this.processMultipleSessions(sessionIds);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            const allProcessedPositions = [];

            for (const result of results) {
                if (result.processedPositions && result.processedPositions.length > 0) {
                    allProcessedPositions.push(...result.processedPositions);
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            allProcessedPositions.sort((a, b) => a.timestamp - b.timestamp);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã
            return allProcessedPositions.map(pos => ({
                latitude: pos.coords[0],
                longitude: pos.coords[1],
                timestamp: pos.timestamp,
                originalCount: pos.originalCount || 1
            }));
        } catch (error) {
            console.error(`‚ùå Error getting task processed coordinates:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–µ
     * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
     * @returns {Promise<Object>} - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á–∏
     */
    async getTaskStats(taskId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
            const sessionsQuery = `
                SELECT id FROM sessions
                WHERE task_id = $1
                ORDER BY start_time ASC
            `;

            const { rows } = await db.query(sessionsQuery, [taskId]);
            const sessionIds = rows.map(row => row.id);

            if (sessionIds.length === 0) {
                return {
                    taskId,
                    sessionsCount: 0,
                    totalOriginalPositions: 0,
                    totalProcessedPositions: 0,
                    totalDistance: 0,
                    averageReductionPercent: 0,
                    movementTypes: []
                };
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            const results = await this.processMultipleSessions(sessionIds);

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            let totalOriginalPositions = 0;
            let totalProcessedPositions = 0;
            let totalDistance = 0;
            let validSessions = 0;
            const movementTypes = [];

            for (const result of results) {
                if (result.stats) {
                    totalOriginalPositions += result.stats.originalCount;
                    totalProcessedPositions += result.stats.processedCount;
                    totalDistance += result.stats.processedDistance;
                    validSessions++;

                    // –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –¥–≤–∏–∂–µ–Ω–∏—è
                    if (result.movementAnalysis && result.movementAnalysis.type) {
                        movementTypes.push({
                            type: result.movementAnalysis.type,
                            confidence: result.movementAnalysis.confidence,
                            avgSpeed: result.movementAnalysis.avgSpeed
                        });
                    }
                }
            }

            const averageReductionPercent = validSessions > 0
                ? results.reduce((sum, result) => sum + (parseFloat(result.stats?.reductionPercent) || 0), 0) / validSessions
                : 0;

            return {
                taskId,
                sessionsCount: sessionIds.length,
                totalOriginalPositions,
                totalProcessedPositions,
                totalDistance: Math.round(totalDistance),
                averageReductionPercent: averageReductionPercent.toFixed(1),
                movementTypes: movementTypes
            };
        } catch (error) {
            console.error(`‚ùå Error getting task stats:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    async getValidationContext(sessionId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
            const query = `
                SELECT 
                    t.id as task_id,
                    t.expected_latitude,
                    t.expected_longitude,
                    t.max_deviation_km,
                    t.address,
                    t.title
                FROM sessions s
                LEFT JOIN tasks t ON s.task_id = t.id
                WHERE s.id = $1
            `;

            const { rows } = await db.query(query, [sessionId]);
            
            if (rows.length === 0 || !rows[0].task_id) {
                // –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                return {};
            }

            const task = rows[0];
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∏–∑ –∞–¥—Ä–µ—Å–∞ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
            let expectedCoords = null;
            if (task.expected_latitude && task.expected_longitude) {
                expectedCoords = [task.expected_latitude, task.expected_longitude];
            }

            return {
                taskId: task.task_id,
                expectedCoords: expectedCoords,
                maxAllowedDeviationKm: task.max_deviation_km || 5.0,
                taskTitle: task.title,
                taskAddress: task.address
            };
        } catch (error) {
            console.error('‚ùå Error getting validation context:', error);
            return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
     * @param {Object} options - –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    updateProcessorSettings(options) {
        this.processor = new CoordinateProcessor({
            enableAdaptiveMode: options.enableAdaptiveMode !== false,
            enableValidation: options.enableValidation !== false,
            maxSpeedKmh: options.maxSpeedKmh || this.processor.maxSpeedKmh,
            minSpeedKmh: options.minSpeedKmh || this.processor.minSpeedKmh,
            clusterRadiusMeters: options.clusterRadiusMeters || this.processor.clusterRadiusMeters,
            timeWindowMs: options.timeWindowMs || this.processor.timeWindowMs,
            minPointsForMedian: options.minPointsForMedian || this.processor.minPointsForMedian,
            maxAllowedDeviationKm: options.maxAllowedDeviationKm,
            consistentShiftThreshold: options.consistentShiftThreshold,
            suspiciousAccuracyThreshold: options.suspiciousAccuracyThreshold,
            teleportationMultiplier: options.teleportationMultiplier
        });

        console.log('‚öôÔ∏è Updated coordinate processor settings:', options);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Å—Å–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Date} startDate - –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
     * @param {Date} endDate - –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
     * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    async getSessionsProcessedCoordinatesForPeriod(userId, startDate, endDate) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            const sessionsQuery = `
                SELECT id FROM sessions
                WHERE user_id = $1
                AND start_time >= $2
                AND start_time <= $3
                ORDER BY start_time ASC
            `;

            const { rows } = await db.query(sessionsQuery, [userId, startDate, endDate]);
            const sessionIds = rows.map(row => row.id);

            if (sessionIds.length === 0) {
                return [];
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            const results = await this.processMultipleSessions(sessionIds);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            const allProcessedPositions = [];

            for (const result of results) {
                if (result.processedPositions && result.processedPositions.length > 0) {
                    allProcessedPositions.push(...result.processedPositions);
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            allProcessedPositions.sort((a, b) => a.timestamp - b.timestamp);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã
            return allProcessedPositions.map(pos => ({
                latitude: pos.coords[0],
                longitude: pos.coords[1],
                timestamp: pos.timestamp,
                originalCount: pos.originalCount || 1
            }));
        } catch (error) {
            console.error(`‚ùå Error getting sessions processed coordinates for period:`, error);
            throw error;
        }
    }
}

module.exports = new CoordinateProcessingService(); 