/**
 * –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */

const CoordinateProcessor = require('./utils/coordinateProcessor');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è
function generateMovementData(type, count = 100) {
    const baseLat = 56.323717;
    const baseLng = 44.037224;
    const positions = [];
    
    let speedRange;
    let noiseLevel;
    
    switch (type) {
        case 'walking':
            speedRange = { min: 0.5, max: 6 }; // 0.5-6 –∫–º/—á
            noiseLevel = 0.00005; // ¬±25 –º–µ—Ç—Ä–æ–≤
            break;
        case 'scooter':
            speedRange = { min: 8, max: 20 }; // 8-20 –∫–º/—á
            noiseLevel = 0.0001; // ¬±50 –º–µ—Ç—Ä–æ–≤
            break;
        case 'car':
            speedRange = { min: 20, max: 60 }; // 20-60 –∫–º/—á
            noiseLevel = 0.0002; // ¬±100 –º–µ—Ç—Ä–æ–≤
            break;
        case 'train':
            speedRange = { min: 40, max: 120 }; // 40-120 –∫–º/—á
            noiseLevel = 0.0003; // ¬±150 –º–µ—Ç—Ä–æ–≤
            break;
        default:
            speedRange = { min: 1, max: 10 };
            noiseLevel = 0.0001;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º
    for (let i = 0; i < count; i++) {
        const time = new Date('2025-08-11T14:17:13.381Z');
        time.setMinutes(time.getMinutes() + i * 2); // –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const movementLat = Math.sin(i * 0.02) * 0.002; // –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const movementLng = Math.cos(i * 0.02) * 0.002;
        
        // GPS —à—É–º
        const noiseLat = (Math.random() - 0.5) * noiseLevel;
        const noiseLng = (Math.random() - 0.5) * noiseLevel;
        
        // –í—ã–±—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–µ 20 —Ç–æ—á–µ–∫)
        let outlierLat = 0;
        let outlierLng = 0;
        if (i % 20 === 0 && i > 0) {
            outlierLat = (Math.random() - 0.5) * 0.005; // ¬±2.5 –∫–º –≤—ã–±—Ä–æ—Å
            outlierLng = (Math.random() - 0.5) * 0.005;
        }
        
        const lat = baseLat + movementLat + noiseLat + outlierLat;
        const lng = baseLng + movementLng + noiseLng + outlierLng;
        
        positions.push({
            coords: [lat, lng],
            timestamp: time
        });
    }
    
    return positions;
}

async function testAdaptiveAlgorithm() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n');
    
    const movementTypes = ['walking', 'scooter', 'car', 'train'];
    
    for (const movementType of movementTypes) {
        console.log(`\nüö∂ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è: ${movementType.toUpperCase()}`);
        console.log('='.repeat(50));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è
        const originalPositions = generateMovementData(movementType, 200);
        console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${originalPositions.length} —Ç–æ—á–µ–∫`);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
        const processor = new CoordinateProcessor({
            enableAdaptiveMode: true
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const result = processor.processCoordinates(originalPositions);
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
        if (result.movementAnalysis) {
            const analysis = result.movementAnalysis;
            console.log(`   –¢–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è: ${analysis.type}`);
            console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);
            console.log(`   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${analysis.avgSpeed.toFixed(1)} –∫–º/—á`);
            console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${analysis.maxSpeed.toFixed(1)} –∫–º/—á`);
        }
        
        console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
        console.log(`   –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: ${result.stats.originalCount}`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: ${result.stats.processedCount}`);
        console.log(`   –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: ${result.stats.reductionPercent}%`);
        console.log(`   –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${result.stats.originalDistance}–º`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${result.stats.processedDistance}–º`);
        console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: ${result.stats.distanceChangePercent}%`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
        console.log('\nüìç –ü–µ—Ä–≤—ã–µ 3 –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–∫–∏:');
        originalPositions.slice(0, 3).forEach((pos, i) => {
            console.log(`   ${i + 1}. [${pos.coords[0].toFixed(6)}, ${pos.coords[1].toFixed(6)}] - ${pos.timestamp.toISOString()}`);
        });
        
        console.log('\nüìç –ü–µ—Ä–≤—ã–µ 3 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏:');
        result.processedPositions.slice(0, 3).forEach((pos, i) => {
            console.log(`   ${i + 1}. [${pos.coords[0].toFixed(6)}, ${pos.coords[1].toFixed(6)}] - ${pos.timestamp.toISOString()} (${pos.originalCount} –∏—Å—Ö–æ–¥–Ω—ã—Ö)`);
        });
        
        console.log('\n' + '='.repeat(50));
    }
    
    // –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
    console.log('\nüéØ –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∞):');
    console.log('='.repeat(50));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ GPS
    const scooterData = generateMovementData('scooter', 300);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å GPS –≤ –Ω–∞—á–∞–ª–µ (–≥–ª—É—à–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞)
    for (let i = 0; i < 10; i++) {
        scooterData[i].coords[0] += (Math.random() - 0.5) * 0.01; // ¬±5 –∫–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        scooterData[i].coords[1] += (Math.random() - 0.5) * 0.01;
    }
    
    const processor = new CoordinateProcessor({
        enableAdaptiveMode: true
    });
    
    const result = processor.processCoordinates(scooterData);
    
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${result.stats.originalCount} —Ç–æ—á–µ–∫`);
    console.log(`üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: ${result.movementAnalysis?.type || 'unknown'}`);
    console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: ${result.stats.processedCount} (—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ ${result.stats.reductionPercent}%)`);
    console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${result.stats.originalDistance}–º ‚Üí ${result.stats.processedDistance}–º`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAdaptiveAlgorithm().catch(console.error); 