/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */

const CoordinateProcessor = require('./utils/coordinateProcessor');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–∏–º—É–ª—è—Ü–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —à—É–º–æ–º
function generateTestCoordinates() {
    const baseLat = 55.751244; // –ú–æ—Å–∫–≤–∞
    const baseLng = 37.618423;
    const positions = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 50 —Ç–æ—á–µ–∫ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —à—É–º–∞
    for (let i = 0; i < 50; i++) {
        const time = new Date(Date.now() + i * 60000); // –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ + —à—É–º
        const movementLat = Math.sin(i * 0.1) * 0.001; // –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const movementLng = Math.cos(i * 0.1) * 0.001;
        
        // –î–æ–±–∞–≤–ª—è–µ–º GPS —à—É–º (—Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
        const noiseLat = (Math.random() - 0.5) * 0.0001; // ¬±50 –º–µ—Ç—Ä–æ–≤
        const noiseLng = (Math.random() - 0.5) * 0.0001;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–µ 10 —Ç–æ—á–µ–∫)
        let outlierLat = 0;
        let outlierLng = 0;
        if (i % 10 === 0 && i > 0) {
            outlierLat = (Math.random() - 0.5) * 0.01; // ¬±5 –∫–º –≤—ã–±—Ä–æ—Å
            outlierLng = (Math.random() - 0.5) * 0.01;
        }
        
        const lat = baseLat + movementLat + noiseLat + outlierLat;
        const lng = baseLng + movementLng + noiseLng + outlierLng;
        
        positions.push({
            coords: [lat, lng],
            timestamp: time
        });
    }
    
    return positions;
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
function testProcessorSettings() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n');
    
    const testPositions = generateTestCoordinates();
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${testPositions.length} —Ç–æ—á–µ–∫`);
    
    // –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('\nüîß –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    const processor1 = new CoordinateProcessor();
    const result1 = processor1.processCoordinates(testPositions);
    const stats1 = processor1.getProcessingStats(testPositions, result1);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', stats1);
    
    // –¢–µ—Å—Ç 2: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    console.log('\nüîß –¢–µ—Å—Ç 2: –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å 50 –∫–º/—á)');
    const processor2 = new CoordinateProcessor({
        maxSpeedKmh: 50,
        clusterRadiusMeters: 10,
        timeWindowMs: 15000
    });
    const result2 = processor2.processCoordinates(testPositions);
    const stats2 = processor2.getProcessingStats(testPositions, result2);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', stats2);
    
    // –¢–µ—Å—Ç 3: –ú—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    console.log('\nüîß –¢–µ—Å—Ç 3: –ú—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å 200 –∫–º/—á)');
    const processor3 = new CoordinateProcessor({
        maxSpeedKmh: 200,
        clusterRadiusMeters: 50,
        timeWindowMs: 60000
    });
    const result3 = processor3.processCoordinates(testPositions);
    const stats3 = processor3.getProcessingStats(testPositions, result3);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', stats3);
    
    return { testPositions, result1, result2, result3, stats1, stats2, stats3 };
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
function testIndividualAlgorithms() {
    console.log('\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n');
    
    const testPositions = generateTestCoordinates();
    const processor = new CoordinateProcessor();
    
    // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    console.log('üìä –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏:');
    const speedFiltered = processor.filterBySpeed(testPositions);
    console.log(`–ò—Å—Ö–æ–¥–Ω—ã–µ: ${testPositions.length} -> –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${speedFiltered.length}`);
    
    // –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n‚è∞ –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:');
    const timeGroups = processor.groupByTime(speedFiltered);
    console.log(`–ì—Ä—É–ø–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeGroups.length}`);
    
    // –¢–µ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüéØ –¢–µ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:');
    let totalClusters = 0;
    for (const group of timeGroups) {
        const clusters = processor.clusterPositions(group);
        totalClusters += clusters.length;
    }
    console.log(`–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${totalClusters}`);
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
async function testWithRealData() {
    console.log('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!process.env.DB_HOST) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
            console.log('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
            console.log('   docker-compose exec backend node test-coordinate-processing.js');
            return;
        }
        
        const db = require('./db');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        const query = `
            SELECT s.id, s.user_id, COUNT(p.id) as position_count
            FROM sessions s
            JOIN positions p ON s.id = p.session_id
            GROUP BY s.id, s.user_id
            HAVING COUNT(p.id) > 10
            ORDER BY position_count DESC
            LIMIT 1
        `;
        
        const { rows } = await db.query(query);
        
        if (rows.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ');
            return;
        }
        
        const sessionId = rows[0].id;
        console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é ${sessionId} —Å ${rows[0].position_count} –ø–æ–∑–∏—Ü–∏—è–º–∏`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        const positionsQuery = `
            SELECT latitude, longitude, timestamp
            FROM positions 
            WHERE session_id = $1
            ORDER BY timestamp ASC
        `;
        
        const { rows: positions } = await db.query(positionsQuery, [sessionId]);
        
        if (positions.length === 0) {
            console.log('‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ —Å–µ—Å—Å–∏–∏');
            return;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        const formattedPositions = positions.map(row => ({
            coords: [parseFloat(row.latitude), parseFloat(row.longitude)],
            timestamp: new Date(row.timestamp)
        }));
        
        console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ ${formattedPositions.length} –ø–æ–∑–∏—Ü–∏–π`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const processor = new CoordinateProcessor();
        const processed = processor.processCoordinates(formattedPositions);
        const stats = processor.getProcessingStats(formattedPositions, processed);
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', stats);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
        console.log('\nüìç –ü–µ—Ä–≤—ã–µ 5 –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫:');
        formattedPositions.slice(0, 5).forEach((pos, i) => {
            console.log(`${i + 1}. [${pos.coords[0].toFixed(6)}, ${pos.coords[1].toFixed(6)}] - ${pos.timestamp.toISOString()}`);
        });
        
        console.log('\nüìç –ü–µ—Ä–≤—ã–µ 5 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫:');
        processed.slice(0, 5).forEach((pos, i) => {
            console.log(`${i + 1}. [${pos.coords[0].toFixed(6)}, ${pos.coords[1].toFixed(6)}] - ${pos.timestamp.toISOString()} (${pos.originalCount} –∏—Å—Ö–æ–¥–Ω—ã—Ö)`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', error);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n');
    
    // –¢–µ—Å—Ç 1: –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    testProcessorSettings();
    
    // –¢–µ—Å—Ç 2: –û—Ç–¥–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    testIndividualAlgorithms();
    
    // –¢–µ—Å—Ç 3: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await testWithRealData();
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = {
    testProcessorSettings,
    testIndividualAlgorithms,
    testWithRealData,
    runTests
}; 