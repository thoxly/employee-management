/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */

const CoordinateProcessor = require('./utils/coordinateProcessor');

// –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤ (495 —Ç–æ—á–µ–∫)
const realCoordinates = [
  {
    latitude: 56.323717,
    longitude: 44.037224,
    timestamp: new Date('2025-08-13T10:00:13.545Z'),
    session_id: 20,
    session_start: new Date('2025-08-11T14:17:13.381Z'),
    session_end: null,
    task_id: 56,
    task_title: '–ö—É–ø–∏—Ç—å –∞–ª–∫–æ',
    task_status: 'in-progress',
    route_type: 'task'
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ 494 —Ç–æ—á–∫–∏
];

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function generateRealisticCoordinates() {
  const baseLat = 56.323717;
  const baseLng = 44.037224;
  const positions = [];
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 495 —Ç–æ—á–µ–∫ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
  for (let i = 0; i < 495; i++) {
    const time = new Date('2025-08-11T14:17:13.381Z');
    time.setMinutes(time.getMinutes() + i * 2); // –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–∏–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É)
    const movementLat = Math.sin(i * 0.01) * 0.001; // –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —à–∏—Ä–æ—Ç–µ
    const movementLng = Math.cos(i * 0.01) * 0.001; // –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–æ–ª–≥–æ—Ç–µ
    
    // –î–æ–±–∞–≤–ª—è–µ–º GPS —à—É–º (—Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
    const noiseLat = (Math.random() - 0.5) * 0.0001; // ¬±50 –º–µ—Ç—Ä–æ–≤
    const noiseLng = (Math.random() - 0.5) * 0.0001;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–µ 50 —Ç–æ—á–µ–∫)
    let outlierLat = 0;
    let outlierLng = 0;
    if (i % 50 === 0 && i > 0) {
      outlierLat = (Math.random() - 0.5) * 0.01; // ¬±5 –∫–º –≤—ã–±—Ä–æ—Å
      outlierLng = (Math.random() - 0.5) * 0.01;
    }
    
    const lat = baseLat + movementLat + noiseLat + outlierLat;
    const lng = baseLng + movementLng + noiseLng + outlierLng;
    
    positions.push({
      coords: [lat, lng],
      timestamp: time
    });
  }
  
  return positions;
}

async function testRealCoordinates() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const originalPositions = generateRealisticCoordinates();
  console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${originalPositions.length} —Ç–æ—á–µ–∫`);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
  const testConfigs = [
    {
      name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      config: {
        maxSpeedKmh: 100,
        minSpeedKmh: 0.1,
        clusterRadiusMeters: 20,
        timeWindowMs: 30000,
        minPointsForMedian: 3
      }
    },
    {
      name: '–°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è',
      config: {
        maxSpeedKmh: 50,
        minSpeedKmh: 0.5,
        clusterRadiusMeters: 10,
        timeWindowMs: 15000,
        minPointsForMedian: 3
      }
    },
    {
      name: '–ú—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è',
      config: {
        maxSpeedKmh: 200,
        minSpeedKmh: 0.05,
        clusterRadiusMeters: 50,
        timeWindowMs: 60000,
        minPointsForMedian: 2
      }
    }
  ];
  
  for (const testConfig of testConfigs) {
    console.log(`\nüîß ${testConfig.name}:`);
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', testConfig.config);
    
    const processor = new CoordinateProcessor(testConfig.config);
    const processedPositions = processor.processCoordinates(originalPositions);
    const stats = processor.getProcessingStats(originalPositions, processedPositions);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      originalCount: stats.originalCount,
      processedCount: stats.processedCount,
      reductionPercent: stats.reductionPercent + '%',
      originalDistance: Math.round(stats.originalDistance) + '–º',
      processedDistance: Math.round(stats.processedDistance) + '–º',
      distanceChangePercent: stats.distanceChangePercent + '%'
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
    console.log('\nüìç –ü–µ—Ä–≤—ã–µ 5 –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫:');
    originalPositions.slice(0, 5).forEach((pos, i) => {
      console.log(`${i + 1}. [${pos.coords[0].toFixed(6)}, ${pos.coords[1].toFixed(6)}] - ${pos.timestamp.toISOString()}`);
    });
    
    console.log('\nüìç –ü–µ—Ä–≤—ã–µ 5 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫:');
    processedPositions.slice(0, 5).forEach((pos, i) => {
      console.log(`${i + 1}. [${pos.coords[0].toFixed(6)}, ${pos.coords[1].toFixed(6)}] - ${pos.timestamp.toISOString()} (${pos.originalCount} –∏—Å—Ö–æ–¥–Ω—ã—Ö)`);
    });
    
    console.log('\n' + '='.repeat(60));
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealCoordinates().catch(console.error); 