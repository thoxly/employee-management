const fetch = require('node-fetch');
const crypto = require('crypto');
const config = require('../config');
const { createWebAppKeyboard, getWebAppUrl } = require('./webapp');

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (parse_mode, reply_markup –∏ —Ç.–¥.)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
const sendTelegramMessage = async (chatId, message, options = {}) => {
    try {
        const url = `https://api.telegram.org/bot${config.telegram.botToken}/sendMessage`;
        
        const payload = {
            chat_id: chatId,
            text: message,
            ...options
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        const result = await response.json();
        
        if (!result.ok) {
            throw new Error(`Telegram API error: ${result.description}`);
        }

        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
        throw error;
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} fullName - –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
const sendRegistrationSuccessMessage = async (telegramId, fullName) => {
    const message = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${fullName}!

‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

üì± **–î–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:**
–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`;

    const options = {
        reply_markup: createWebAppKeyboard()
    };

    return sendTelegramMessage(telegramId, message, options);
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
const sendRegistrationErrorMessage = async (telegramId, errorMessage) => {
    const message = `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

${errorMessage}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;

    return sendTelegramMessage(telegramId, message);
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
const sendAssignedTaskNotification = async (telegramId, task) => {
    const message = `üìã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}
üìÖ –°—Ä–æ–∫: ${task.end_date ? new Date(task.end_date).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω'}

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`;

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                        web_app: { url: getWebAppUrl(`/my-app`) }
                    }
                ]
            ]
        }
    };

    return sendTelegramMessage(telegramId, message, options);
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏
 * @param {number[]} telegramIds - –ú–∞—Å—Å–∏–≤ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
 * @returns {Promise<Object[]>} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
const sendNotAssignedTaskNotification = async (telegramIds, task) => {
    const message = `üîî –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}
üìÖ –°—Ä–æ–∫: ${task.end_date ? new Date(task.end_date).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω'}

–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`;

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                        web_app: { url: getWebAppUrl(`/my-app/`) }
                    }
                ]
            ]
        }
    };

    return Promise.all(telegramIds.map(telegramId => 
        sendTelegramMessage(telegramId, message, options)
    ));
};

/**
 * Verify Telegram Web App initData
 * @param {string} initData - Raw initData string from Telegram Web App
 * @returns {boolean} - Whether the data is valid
 */
const verifyTelegramWebAppData = (initData) => {
  try {
    console.log('=== VERIFYING TELEGRAM WEB APP DATA ===');
    console.log('InitData:', initData);
    console.log('Bot token exists:', !!config.telegram.botToken);
    
    // Get data-check-string
    const urlParams = new URLSearchParams(initData);
    const hash = urlParams.get('hash');
    urlParams.delete('hash');
    
    console.log('Hash from initData:', hash);
    console.log('URL params:', Object.fromEntries(urlParams.entries()));
    
    // Generate data-check-string
    const dataCheckString = Array.from(urlParams.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');

    console.log('Data check string:', dataCheckString);

    // Generate secret key (as per Telegram docs)
    const secretKey = crypto
      .createHmac('sha256', 'WebAppData')
      .update(config.telegram.botToken)
      .digest();

    // Calculate hash
    const calculatedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');

    console.log('Calculated hash:', calculatedHash);
    console.log('Hash match:', calculatedHash === hash);
    
    return calculatedHash === hash;
  } catch (error) {
    console.error('Error verifying Telegram Web App data:', error);
    return false;
  }
};

module.exports = {
    sendTelegramMessage,
    sendRegistrationSuccessMessage,
    sendRegistrationErrorMessage,
    sendAssignedTaskNotification,
    sendNotAssignedTaskNotification,
    verifyTelegramWebAppData
}; 