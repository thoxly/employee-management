/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã:
 * 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π)
 * 3. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö —Ç–æ—á–µ–∫
 * 6. –ú–µ–¥–∏–∞–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * + –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è
 * + –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–º–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */

const { isValidCoordinates } = require('./coordinates');
const CoordinateValidator = require('./coordinateValidator');

class CoordinateProcessor {
    constructor(options = {}) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        this.maxSpeedKmh = options.maxSpeedKmh || 100; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
        this.minSpeedKmh = options.minSpeedKmh || 0.1; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        this.clusterRadiusMeters = options.clusterRadiusMeters || 20; // —Ä–∞–¥–∏—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö
        this.timeWindowMs = options.timeWindowMs || 30000; // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (30 —Å–µ–∫—É–Ω–¥)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        this.minPointsForMedian = options.minPointsForMedian || 3; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –º–µ–¥–∏–∞–Ω—ã

        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.enableAdaptiveMode = options.enableAdaptiveMode !== false; // –≤–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        this.adaptiveSpeedThresholds = {
            walking: { min: 0.5, max: 8 },      // –ø–µ—à–∫–æ–º: 0.5-8 –∫–º/—á
            scooter: { min: 3, max: 25 },       // —Å–∞–º–æ–∫–∞—Ç: 3-25 –∫–º/—á
            car: { min: 5, max: 120 },          // –∞–≤—Ç–æ: 5-120 –∫–º/—á
            train: { min: 20, max: 200 }        // –ø–æ–µ–∑–¥: 20-200 –∫–º/—á
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        this.enableValidation = options.enableValidation !== false; // –≤–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        this.validator = new CoordinateValidator({
            maxAllowedDeviationKm: options.maxAllowedDeviationKm || 5,
            consistentShiftThreshold: options.consistentShiftThreshold || 0.001,
            suspiciousAccuracyThreshold: options.suspiciousAccuracyThreshold || 0.00001,
            teleportationMultiplier: options.teleportationMultiplier || 3
        });

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        this.EARTH_RADIUS_KM = 6371; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
        this.METERS_PER_DEGREE_LAT = 111000; // –ø—Ä–∏–º–µ—Ä–Ω–æ –º–µ—Ç—Ä–æ–≤ –≤ –≥—Ä–∞–¥—É—Å–µ —à–∏—Ä–æ—Ç—ã
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π
     * @param {Array} positions - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
     * @returns {Object} - —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    analyzeMovementType(positions) {
        if (positions.length < 5) {
            return {
                type: 'unknown',
                confidence: 0,
                settings: this.getDefaultSettings()
            };
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        const speeds = [];
        for (let i = 1; i < positions.length; i++) {
            const speed = this.calculateSpeed(
                positions[i - 1].coords,
                positions[i].coords,
                positions[i - 1].timestamp,
                positions[i].timestamp
            );
            if (speed > 0 && speed < 500) { // –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã
                speeds.push(speed);
            }
        }

        if (speeds.length === 0) {
            return {
                type: 'static',
                confidence: 1,
                settings: this.getStaticSettings()
            };
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–µ–π
        const avgSpeed = speeds.reduce((sum, s) => sum + s, 0) / speeds.length;
        const maxSpeed = Math.max(...speeds);
        const speedVariance = speeds.reduce((sum, s) => sum + Math.pow(s - avgSpeed, 2), 0) / speeds.length;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è
        let detectedType = 'unknown';
        let confidence = 0;

        for (const [type, thresholds] of Object.entries(this.adaptiveSpeedThresholds)) {
            const inRange = speeds.filter(s => s >= thresholds.min && s <= thresholds.max).length;
            const typeConfidence = inRange / speeds.length;

            if (typeConfidence > confidence) {
                confidence = typeConfidence;
                detectedType = type;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        if (avgSpeed < 1 && maxSpeed < 3) {
            detectedType = 'walking';
            confidence = Math.max(confidence, 0.8);
        } else if (avgSpeed > 15 && maxSpeed > 30) {
            detectedType = 'car';
            confidence = Math.max(confidence, 0.7);
        } else if (avgSpeed > 8 && avgSpeed < 20 && speedVariance < 50) {
            detectedType = 'scooter';
            confidence = Math.max(confidence, 0.6);
        }

        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è: ${detectedType} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%)`);
        console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${avgSpeed.toFixed(1)} –∫–º/—á, –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${maxSpeed.toFixed(1)} –∫–º/—á`);

        return {
            type: detectedType,
            confidence: confidence,
            avgSpeed: avgSpeed,
            maxSpeed: maxSpeed,
            settings: this.getAdaptiveSettings(detectedType, avgSpeed, maxSpeed)
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {string} movementType - —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {number} avgSpeed - —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
     * @param {number} maxSpeed - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
     * @returns {Object} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    getAdaptiveSettings(movementType, avgSpeed, maxSpeed) {
        const baseSettings = {
            maxSpeedKmh: Math.min(maxSpeed * 1.5, 200),
            minSpeedKmh: Math.max(avgSpeed * 0.1, 0.05),
            clusterRadiusMeters: 20,
            timeWindowMs: 30000,
            minPointsForMedian: 3
        };

        switch (movementType) {
            case 'walking':
                return {
                    ...baseSettings,
                    maxSpeedKmh: 10,
                    minSpeedKmh: 0.3,
                    clusterRadiusMeters: 10,
                    timeWindowMs: 20000,
                    minPointsForMedian: 2
                };

            case 'scooter':
                return {
                    ...baseSettings,
                    maxSpeedKmh: 30,
                    minSpeedKmh: 1,
                    clusterRadiusMeters: 15,
                    timeWindowMs: 25000,
                    minPointsForMedian: 3
                };

            case 'car':
                return {
                    ...baseSettings,
                    maxSpeedKmh: 130,
                    minSpeedKmh: 3,
                    clusterRadiusMeters: 30,
                    timeWindowMs: 45000,
                    minPointsForMedian: 4
                };

            case 'train':
                return {
                    ...baseSettings,
                    maxSpeedKmh: 200,
                    minSpeedKmh: 10,
                    clusterRadiusMeters: 50,
                    timeWindowMs: 60000,
                    minPointsForMedian: 5
                };

            default:
                return baseSettings;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    getStaticSettings() {
        return {
            maxSpeedKmh: 5,
            minSpeedKmh: 0.1,
            clusterRadiusMeters: 5,
            timeWindowMs: 10000,
            minPointsForMedian: 2
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultSettings() {
        return {
            maxSpeedKmh: 100,
            minSpeedKmh: 0.1,
            clusterRadiusMeters: 20,
            timeWindowMs: 30000,
            minPointsForMedian: 3
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
     * @param {Array} point1 - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [lat, lng]
     * @param {Array} point2 - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [lat, lng]
     * @returns {number} - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
     */
    calculateDistance(point1, point2) {
        if (!isValidCoordinates(point1) || !isValidCoordinates(point2)) {
            return Infinity;
        }

        const [lat1, lng1] = point1;
        const [lat2, lng2] = point2;

        // –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        const dLat = this.toRadians(lat2 - lat1);
        const dLng = this.toRadians(lng2 - lng1);

        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *
                  Math.sin(dLng / 2) * Math.sin(dLng / 2);

        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return this.EARTH_RADIUS_KM * c * 1000; // –≤ –º–µ—Ç—Ä–∞—Ö
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
     */
    toRadians(degrees) {
        return degrees * (Math.PI / 180);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º/—á
     * @param {Array} point1 - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [lat, lng]
     * @param {Array} point2 - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [lat, lng]
     * @param {Date} time1 - –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
     * @param {Date} time2 - –≤—Ä–µ–º—è –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
     * @returns {number} - —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
     */
    calculateSpeed(point1, point2, time1, time2) {
        const distance = this.calculateDistance(point1, point2);
        const timeDiffHours = Math.abs(time2 - time1) / (1000 * 60 * 60); // –≤ —á–∞—Å–∞—Ö

        if (timeDiffHours === 0) return 0;
        return distance / 1000 / timeDiffHours; // –∫–º/—á
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–º–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param {Object} position - –ø–æ–∑–∏—Ü–∏—è {coords: [lat, lng], timestamp: Date}
     * @param {Object} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @returns {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validatePosition(position, context = {}) {
        if (!this.enableValidation) {
            return { isValid: true, riskLevel: 'LOW', warnings: [] };
        }

        return this.validator.validateCoordinates(position.coords, {
            expectedCoords: context.expectedCoords,
            previousPositions: context.previousPositions,
            lastPosition: context.lastPosition,
            timeDiff: context.lastPosition ? 
                Math.abs(position.timestamp - context.lastPosition.timestamp) : null,
            maxSpeedKmh: this.maxSpeedKmh,
            recentPositions: context.recentPositions
        });
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @param {Array} positions - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
     * @param {Object} validationContext - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @returns {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    filterByValidation(positions, validationContext = {}) {
        if (!this.enableValidation || positions.length === 0) {
            return {
                filtered: positions,
                validationResults: [],
                stats: { total: positions.length, accepted: positions.length, flagged: 0, rejected: 0 }
            };
        }

        const filtered = [];
        const validationResults = [];
        const stats = { total: positions.length, accepted: 0, flagged: 0, rejected: 0 };

        for (let i = 0; i < positions.length; i++) {
            const position = positions[i];
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const context = {
                expectedCoords: validationContext.expectedCoords,
                previousPositions: filtered.slice(-5), // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                lastPosition: filtered.length > 0 ? filtered[filtered.length - 1] : null,
                recentPositions: positions.slice(Math.max(0, i - 10), i) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            };

            const validation = this.validatePosition(position, context);
            validationResults.push({
                position: position,
                validation: validation,
                index: i
            });

            // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const actions = this.validator.getRecommendedActions(validation);

            if (actions.accept) {
                filtered.push({
                    ...position,
                    validationInfo: {
                        riskLevel: validation.riskLevel,
                        warnings: validation.warnings,
                        flagged: actions.flagForReview
                    }
                });
                
                if (actions.flagForReview) {
                    stats.flagged++;
                } else {
                    stats.accepted++;
                }
            } else {
                stats.rejected++;
                console.log(`üö´ Position ${i} rejected by validation: ${actions.message}`);
            }
        }

        console.log(`üîç Validation filtering: ${stats.total} -> ${filtered.length} positions (${stats.rejected} rejected, ${stats.flagged} flagged)`);

        return {
            filtered,
            validationResults,
            stats
        };
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∞–ª–≥–æ—Ä–∏—Ç–º 1)
     * @param {Array} positions - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π [{coords: [lat, lng], timestamp: Date}, ...]
     * @returns {Array} - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    filterBySpeed(positions) {
        if (positions.length <= 1) return positions;

        const filtered = [positions[0]]; // –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É

        for (let i = 1; i < positions.length; i++) {
            const current = positions[i];
            const previous = positions[i - 1];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!isValidCoordinates(current.coords) || !isValidCoordinates(previous.coords)) {
                console.log(`‚ö†Ô∏è Invalid coordinates at position ${i}, skipping`);
                continue;
            }

            const speed = this.calculateSpeed(
                previous.coords,
                current.coords,
                previous.timestamp,
                current.timestamp
            );

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if (speed <= this.maxSpeedKmh && speed >= this.minSpeedKmh) {
                filtered.push(current);
            } else {
                console.log(`üö´ Filtered out position ${i} with speed ${speed.toFixed(2)} km/h`);
            }
        }

        console.log(`üìä Speed filtering: ${positions.length} -> ${filtered.length} positions`);
        return filtered;
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∞–ª–≥–æ—Ä–∏—Ç–º 6, —à–∞–≥ 1)
     * @param {Array} positions - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
     * @returns {Array} - –≥—Ä—É–ø–ø—ã –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    groupByTime(positions) {
        if (positions.length === 0) return [];

        const groups = [];
        let currentGroup = [positions[0]];

        for (let i = 1; i < positions.length; i++) {
            const current = positions[i];
            const firstInGroup = currentGroup[0];

            const timeDiff = Math.abs(current.timestamp - firstInGroup.timestamp);

            if (timeDiff <= this.timeWindowMs) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                currentGroup.push(current);
            } else {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if (currentGroup.length > 0) {
                    groups.push(currentGroup);
                }
                currentGroup = [current];
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        if (currentGroup.length > 0) {
            groups.push(currentGroup);
        }

        console.log(`‚è∞ Time grouping: ${positions.length} positions -> ${groups.length} groups`);
        return groups;
    }

    /**
     * –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–æ—á–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–∞–ª–≥–æ—Ä–∏—Ç–º 3)
     * @param {Array} positions - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
     * @returns {Array} - –∫–ª–∞—Å—Ç–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
     */
    clusterPositions(positions) {
        if (positions.length <= 1) return [positions];

        const clusters = [];
        const visited = new Set();

        for (let i = 0; i < positions.length; i++) {
            if (visited.has(i)) continue;

            const cluster = [positions[i]];
            visited.add(i);

            // –ò—â–µ–º –±–ª–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏
            for (let j = i + 1; j < positions.length; j++) {
                if (visited.has(j)) continue;

                const distance = this.calculateDistance(
                    positions[i].coords,
                    positions[j].coords
                );

                if (distance <= this.clusterRadiusMeters) {
                    cluster.push(positions[j]);
                    visited.add(j);
                }
            }

            clusters.push(cluster);
        }

        console.log(`üéØ Clustering: ${positions.length} positions -> ${clusters.length} clusters`);
        return clusters;
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ–¥–∏–∞–Ω—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ (–∞–ª–≥–æ—Ä–∏—Ç–º 6, —à–∞–≥ 2)
     * @param {Array} cluster - –∫–ª–∞—Å—Ç–µ—Ä –ø–æ–∑–∏—Ü–∏–π
     * @returns {Object|null} - –º–µ–¥–∏–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ null
     */
    calculateMedianPosition(cluster) {
        if (cluster.length === 0) return null;
        if (cluster.length === 1) return cluster[0];

        // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–µ–¥–∏–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        if (cluster.length < this.minPointsForMedian) {
            return this.calculateAveragePosition(cluster);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω—É –¥–ª—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        const lats = cluster.map(p => p.coords[0]).sort((a, b) => a - b);
        const lngs = cluster.map(p => p.coords[1]).sort((a, b) => a - b);

        const medianLat = this.calculateMedian(lats);
        const medianLng = this.calculateMedian(lngs);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        const avgTimestamp = new Date(
            cluster.reduce((sum, p) => sum + p.timestamp.getTime(), 0) / cluster.length
        );

        return {
            coords: [medianLat, medianLng],
            timestamp: avgTimestamp,
            originalCount: cluster.length
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param {Array} cluster - –∫–ª–∞—Å—Ç–µ—Ä –ø–æ–∑–∏—Ü–∏–π
     * @returns {Object} - —Å—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è
     */
    calculateAveragePosition(cluster) {
        const avgLat = cluster.reduce((sum, p) => sum + p.coords[0], 0) / cluster.length;
        const avgLng = cluster.reduce((sum, p) => sum + p.coords[1], 0) / cluster.length;
        const avgTimestamp = new Date(
            cluster.reduce((sum, p) => sum + p.timestamp.getTime(), 0) / cluster.length
        );

        return {
            coords: [avgLat, avgLng],
            timestamp: avgTimestamp,
            originalCount: cluster.length
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ–¥–∏–∞–Ω—É –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª
     * @param {Array} numbers - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
     * @returns {number} - –º–µ–¥–∏–∞–Ω–∞
     */
    calculateMedian(numbers) {
        const sorted = [...numbers].sort((a, b) => a - b);
        const mid = Math.floor(sorted.length / 2);

        if (sorted.length % 2 === 0) {
            return (sorted[mid - 1] + sorted[mid]) / 2;
        } else {
            return sorted[mid];
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ 1, 3, 6 + –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º + –≤–∞–ª–∏–¥–∞—Ü–∏—è)
     * @param {Array} positions - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π [{coords: [lat, lng], timestamp: Date}, ...]
     * @param {Object} validationContext - –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (expectedCoords, taskId, etc.)
     * @returns {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    processCoordinates(positions, validationContext = {}) {
        if (!Array.isArray(positions) || positions.length === 0) {
            return {
                processedPositions: [],
                movementAnalysis: null,
                validationSummary: null,
                stats: null
            };
        }

        console.log(`üîÑ Starting coordinate processing for ${positions.length} positions`);

        // –®–∞–≥ 0: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–æ–≤—ã–π —ç—Ç–∞–ø)
        let validationResult = null;
        let validatedPositions = positions;

        if (this.enableValidation) {
            validationResult = this.filterByValidation(positions, validationContext);
            validatedPositions = validationResult.filtered;
            
            console.log(`üîç Validation completed: ${validationResult.stats.rejected} rejected, ${validationResult.stats.flagged} flagged`);
        }

        let movementAnalysis = null;
        let adaptiveSettings = null;

        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
        if (this.enableAdaptiveMode) {
            movementAnalysis = this.analyzeMovementType(validatedPositions);
            adaptiveSettings = movementAnalysis.settings;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            this.maxSpeedKmh = adaptiveSettings.maxSpeedKmh;
            this.minSpeedKmh = adaptiveSettings.minSpeedKmh;
            this.clusterRadiusMeters = adaptiveSettings.clusterRadiusMeters;
            this.timeWindowMs = adaptiveSettings.timeWindowMs;
            this.minPointsForMedian = adaptiveSettings.minPointsForMedian;

            console.log(`üéØ Applied adaptive settings for ${movementAnalysis.type}:`, adaptiveSettings);
        }

        // –®–∞–≥ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        const speedFiltered = this.filterBySpeed(validatedPositions);

        // –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const timeGroups = this.groupByTime(speedFiltered);

        // –®–∞–≥ 3: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        const processed = [];

        for (const group of timeGroups) {
            const clusters = this.clusterPositions(group);

            for (const cluster of clusters) {
                const medianPosition = this.calculateMedianPosition(cluster);
                if (medianPosition) {
                    processed.push(medianPosition);
                }
            }
        }

        console.log(`‚úÖ Coordinate processing completed: ${positions.length} -> ${processed.length} positions`);

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = this.getProcessingStats(positions, processed);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (validationResult) {
            stats.validation = validationResult.stats;
        }

        return {
            processedPositions: processed,
            movementAnalysis: movementAnalysis,
            validationSummary: validationResult ? {
                stats: validationResult.stats,
                highRiskPositions: validationResult.validationResults.filter(r => r.validation.riskLevel === 'HIGH'),
                flaggedPositions: validationResult.validationResults.filter(r => r.validation.warnings.length > 0)
            } : null,
            stats: stats
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–æ—á–∫–∞–º
     * @param {Array} processedPositions - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @returns {number} - –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
     */
    calculateTotalDistance(processedPositions) {
        if (processedPositions.length <= 1) return 0;

        let totalDistance = 0;

        for (let i = 1; i < processedPositions.length; i++) {
            const distance = this.calculateDistance(
                processedPositions[i - 1].coords,
                processedPositions[i].coords
            );
            totalDistance += distance;
        }

        return totalDistance;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param {Array} originalPositions - –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @param {Array} processedPositions - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @returns {Object} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getProcessingStats(originalPositions, processedPositions) {
        const originalDistance = this.calculateTotalDistance(originalPositions);
        const processedDistance = this.calculateTotalDistance(processedPositions);

        return {
            originalCount: originalPositions.length,
            processedCount: processedPositions.length,
            reductionPercent: originalPositions.length > 0
                ? ((originalPositions.length - processedPositions.length) / originalPositions.length * 100).toFixed(1)
                : 0,
            originalDistance: Math.round(originalDistance),
            processedDistance: Math.round(processedDistance),
            distanceChangePercent: originalDistance > 0
                ? ((processedDistance - originalDistance) / originalDistance * 100).toFixed(1)
                : 0
        };
    }
}

module.exports = CoordinateProcessor; 