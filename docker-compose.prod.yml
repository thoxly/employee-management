services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - bot
    networks:
      - production_network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/1_init.sql
    networks:
      - production_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.production
    environment:
      - HOST=0.0.0.0
      - PORT=3000
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - production_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - ./backend/.env.production
    environment:
      - NODE_ENV=production
    depends_on:
      - db
    networks:
      - production_network
    restart: unless-stopped

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    env_file:
      - ./bot/.env.production
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - production_network
    restart: unless-stopped

volumes:
  postgres_data_prod:

networks:
  production_network:
    driver: bridge 