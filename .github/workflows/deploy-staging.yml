name: Deploy to Staging

on:
  push:
    branches: [staging]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ../bot && npm ci

      - name: Run tests
        run: |
          cd backend && npm test
          cd ../frontend && npm test -- --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build backend
        run: |
          cd backend
          npm run build

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 89.111.169.243
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üöÄ Starting deployment to staging environment..."

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            cd /var/www/prod

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üõë Stopping current containers..."
            docker-compose -f docker-compose.staging.yml down || true

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            echo "üì• Pulling latest changes from staging branch..."
            git fetch origin
            git reset --hard origin/staging

            # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            echo "üîß Setting up environment variables..."
            cp env.staging .env.staging || true

            # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üî® Building and starting containers..."
            docker-compose -f docker-compose.staging.yml build --no-cache
            docker-compose -f docker-compose.staging.yml up -d

            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚è≥ Waiting for services to start..."
            sleep 30

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            echo "üîç Checking deployment status..."
            docker-compose -f docker-compose.staging.yml ps

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            echo "üåê Testing application availability..."
            curl -f https://staging.–ø—Ä–∏–±—ã–ª.—Ä—Ñ/health || echo "Health check failed"

            echo "‚úÖ Staging deployment completed!"
            echo "üåê Application available at: https://staging.–ø—Ä–∏–±—ã–ª.—Ä—Ñ"

  notify:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            üß™ **Staging Deployment**

            **Status**: ${{ needs.deploy-staging.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            **Branch**: staging
            **Commit**: ${{ github.sha }}
            **Author**: ${{ github.actor }}

            **URL**: https://staging.–ø—Ä–∏–±—ã–ª.—Ä—Ñ

            ${{ needs.deploy-staging.result == 'success' && 'üéâ Deployment successful!' || '‚ö†Ô∏è Deployment failed. Check logs for details.' }}
