services:
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/1_init.sql
    networks:
      - staging_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    env_file:
      - ./frontend/.env
      - ./.env
    environment:
      - HOST=0.0.0.0
      - PORT=3002
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - staging_network
    command: npm start

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    env_file:
      - ./backend/.env
      - ./.env
    environment:
      - NODE_ENV=development
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - db
    networks:
      - staging_network
    command: npm run dev

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    env_file:
      - ./bot/.env
      - ./.env
    environment:
      - NODE_ENV=development
    volumes:
      - ./bot:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - staging_network
    command: npm run dev

volumes:
  postgres_data_staging:

networks:
  staging_network:
    driver: bridge 