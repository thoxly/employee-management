import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { api } from '../utils/api';
import { getTelegramUser, triggerHapticSelection, triggerHapticFeedback } from '../utils/telegram';

export const useMyApp = (isAuthenticated, user) => {
  const navigate = useNavigate();
  const [currentView, setCurrentView] = useState('home');
  const [tasks, setTasks] = useState({ assigned: [], free: [] });
  const [currentTask, setCurrentTask] = useState(null);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedTasks, setExpandedTasks] = useState(new Set());
  const [showMap, setShowMap] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
  const [currentLocation, setCurrentLocation] = useState([55.751244, 37.618423]);
  const [targetLocation, setTargetLocation] = useState([55.751244, 37.618423]);
  const [route, setRoute] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
  const [locationModalOpen, setLocationModalOpen] = useState(false);
  const [pendingTaskId, setPendingTaskId] = useState(null);
  const [hasTaskInProgress, setHasTaskInProgress] = useState(false);
  const [inProgressTask, setInProgressTask] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const telegramUser = getTelegramUser();
        if (!telegramUser) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [tasksResponse, profileResponse] = await Promise.all([
          api.tasks.getForMiniApp(telegramUser.id),
          user && isAuthenticated ? Promise.resolve(user) : api.auth.getProfile()
        ]);

        setTasks(tasksResponse);
        setProfile(profileResponse);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
        const inProgressTask = tasksResponse.assigned.find(task => task.status === 'in-progress');
        const acceptedTask = tasksResponse.assigned.find(task => task.status === 'accepted');
        const currentTaskToSet = inProgressTask || acceptedTask;
        setCurrentTask(currentTaskToSet || null);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in-progress (–∫–æ—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∑—è—Ç–∏–µ assigned –∑–∞–¥–∞—á)
        setHasTaskInProgress(!!inProgressTask);
        setInProgressTask(inProgressTask || null);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        if (inProgressTask) {
          console.log('üöÄ Initial load - Setting showMap to true for in-progress task:', inProgressTask.id);
          setShowMap(true);
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
          if (!currentLocation || currentLocation.length !== 2 || !targetLocation || targetLocation.length !== 2) {
            const mockLocation = [55.751244 + Math.random() * 0.01, 37.618423 + Math.random() * 0.01];
            console.log('üöÄ Initial load - Setting new mock location:', mockLocation);
            setTargetLocation(mockLocation);
            setCurrentLocation(mockLocation);
            setRoute([mockLocation]);
          } else {
            console.log('üöÄ Initial load - Keeping existing location data');
          }
        }

      } catch (err) {
        console.error('Failed to fetch data:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      } finally {
        setLoading(false);
      }
    };

    if (isAuthenticated) {
      fetchData();
    } else {
      setLoading(false);
    }
  }, [isAuthenticated, user]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (currentView === 'home' && isAuthenticated) {
      refreshTasks();
    }
  }, [currentView, isAuthenticated]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
  useEffect(() => {
    if (!showMap || currentTask?.status !== 'in-progress') return;

    const interval = setInterval(() => {
      const randomOffset = () => (Math.random() - 0.5) * 0.001;
      const newLocation = [
        targetLocation[0] + randomOffset(),
        targetLocation[1] + randomOffset(),
      ];
      setCurrentLocation(newLocation);
      setRoute(prev => [...prev, newLocation].slice(-20));
    }, 3000);

    return () => clearInterval(interval);
  }, [showMap, currentTask?.status, targetLocation]);

  const handleNavChange = (event, newValue) => {
    triggerHapticSelection();
    setCurrentView(newValue);
    switch (newValue) {
      case 'home':
        navigate('/my-app');
        break;
      case 'settings':
        navigate('/my-app/settings');
        break;
      default:
        break;
    }
  };

  const handleTaskExpand = (taskId) => {
    triggerHapticSelection();
    const newExpanded = new Set(expandedTasks);
    if (newExpanded.has(taskId)) {
      newExpanded.delete(taskId);
    } else {
      newExpanded.add(taskId);
    }
    setExpandedTasks(newExpanded);
  };

  const handleAcceptAssigned = async (taskId, event) => {
    event.stopPropagation();
    try {
      triggerHapticFeedback('medium');
      const telegramUser = getTelegramUser();
      await api.tasks.acceptAssigned(taskId, telegramUser.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const response = await api.tasks.getForMiniApp(telegramUser.id);
      setTasks(response);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏ –∫–∞—Ä—Ç—ã
      const inProgressTask = response.assigned.find(task => task.status === 'in-progress');
      const acceptedTask = response.assigned.find(task => task.status === 'accepted');
      const currentTaskToSet = inProgressTask || acceptedTask;
      setCurrentTask(currentTaskToSet || null);
      
      setHasTaskInProgress(!!inProgressTask);
      setInProgressTask(inProgressTask || null);
      
      setSnackbar({
        open: true,
        message: '–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!',
        severity: 'success'
      });
    } catch (err) {
      console.error('Failed to accept task:', err);
      setSnackbar({
        open: true,
        message: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏',
        severity: 'error'
      });
    }
  };

  const handleTakeFree = async (taskId, event) => {
    event.stopPropagation();
    try {
      triggerHapticFeedback('medium');
      const telegramUser = getTelegramUser();
      
      await api.tasks.takeFree(taskId, telegramUser.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const response = await api.tasks.getForMiniApp(telegramUser.id);
      setTasks(response);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏ –∫–∞—Ä—Ç—ã
      const inProgressTask = response.assigned.find(task => task.status === 'in-progress');
      const acceptedTask = response.assigned.find(task => task.status === 'accepted');
      const currentTaskToSet = inProgressTask || acceptedTask;
      setCurrentTask(currentTaskToSet || null);
      
      setHasTaskInProgress(!!inProgressTask);
      setInProgressTask(inProgressTask || null);
      
      setSnackbar({
        open: true,
        message: '–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞!',
        severity: 'success'
      });
    } catch (err) {
      console.error('Failed to take task:', err);
      setSnackbar({
        open: true,
        message: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏',
        severity: 'error'
      });
    }
  };

  const handleStartWork = async (taskId, event) => {
    event.stopPropagation();
    try {
      triggerHapticFeedback('medium');
      const telegramUser = getTelegramUser();
      
      console.log('üéØ handleStartWork - Starting work for task:', taskId);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      const mockLocation = [55.751244 + Math.random() * 0.01, 37.618423 + Math.random() * 0.01];
      console.log('üéØ handleStartWork - Setting mock location:', mockLocation);
      setTargetLocation(mockLocation);
      setCurrentLocation(mockLocation);
      setRoute([mockLocation]);
      setShowMap(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      await api.tasks.startWork(taskId, telegramUser.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const response = await api.tasks.getForMiniApp(telegramUser.id);
      setTasks(response);
      setHasTaskInProgress(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
      const updatedTask = response.assigned.find(task => task.id === taskId);
      if (updatedTask) {
        setCurrentTask(updatedTask);
        console.log('üéØ handleStartWork - Updated current task:', updatedTask.id, updatedTask.status);
      }
      
      setSnackbar({
        open: true,
        message: '–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!',
        severity: 'success'
      });
    } catch (err) {
      console.error('Failed to start work:', err);
      setSnackbar({
        open: true,
        message: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã',
        severity: 'error'
      });
    }
  };

  const handleCompleteWork = async (taskId, event) => {
    event.stopPropagation();
    try {
      triggerHapticFeedback('medium');
      const telegramUser = getTelegramUser();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      await api.tasks.updateStatus(taskId, 'completed', telegramUser.id);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
      setShowMap(false);
      setRoute([]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const response = await api.tasks.getForMiniApp(telegramUser.id);
      setTasks(response);
      setHasTaskInProgress(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
      const updatedTask = response.assigned.find(task => task.id === taskId);
      if (updatedTask) {
        setCurrentTask(updatedTask);
      } else {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–±–∏—Ä–∞–µ–º –µ—ë –∏–∑ —Ç–µ–∫—É—â–∏—Ö
        setCurrentTask(null);
      }
      
      setSnackbar({
        open: true,
        message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        severity: 'success'
      });
    } catch (err) {
      console.error('Failed to complete task:', err);
      setSnackbar({
        open: true,
        message: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
        severity: 'error'
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const refreshTasks = async () => {
    try {
      const telegramUser = getTelegramUser();
      const tasksResponse = await api.tasks.getForMiniApp(telegramUser.id);
      setTasks(tasksResponse);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∞–º –≤ —Ä–∞–±–æ—Ç–µ
      const inProgressTask = tasksResponse.assigned.find(task => task.status === 'in-progress');
      const acceptedTask = tasksResponse.assigned.find(task => task.status === 'accepted');
      const currentTaskToSet = inProgressTask || acceptedTask;
      setCurrentTask(currentTaskToSet || null);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in-progress (–∫–æ—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∑—è—Ç–∏–µ assigned –∑–∞–¥–∞—á)
      setHasTaskInProgress(!!inProgressTask);
      setInProgressTask(inProgressTask || null);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
      const wasMapVisible = showMap;
      const hadCurrentLocation = currentLocation && currentLocation.length === 2;
      const hadTargetLocation = targetLocation && targetLocation.length === 2;
      const hadRoute = route && route.length > 0;
      
      console.log('üîç refreshTasks - Debug:', {
        inProgressTask: inProgressTask?.id,
        inProgressTaskStatus: inProgressTask?.status,
        wasMapVisible,
        hadCurrentLocation,
        hadTargetLocation,
        hadRoute,
        showMap
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
      if (inProgressTask) {
        console.log('‚úÖ Setting showMap to true for in-progress task:', inProgressTask.id);
        setShowMap(true);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if (!hadCurrentLocation || !hadTargetLocation) {
          const mockLocation = [55.751244 + Math.random() * 0.01, 37.618423 + Math.random() * 0.01];
          console.log('üìç Setting new mock location:', mockLocation);
          setTargetLocation(mockLocation);
          setCurrentLocation(mockLocation);
          setRoute([mockLocation]);
        } else {
          console.log('üìç Keeping existing location data');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ, —Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        console.log('‚ùå Setting showMap to false - no in-progress task');
        setShowMap(false);
        setRoute([]);
      }
    } catch (err) {
      console.error('Failed to refresh tasks:', err);
    }
  };

  const handleLocationModalClose = () => {
    setLocationModalOpen(false);
    setPendingTaskId(null);
  };

  const handleLocationModalRetry = async () => {
    if (!pendingTaskId) return;
    
    try {
      const telegramUser = getTelegramUser();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é (–ª–æ–∫–∞—Ü–∏—é) —Å–Ω–æ–≤–∞
      const sessionResponse = await api.sessions.getActiveSession(telegramUser.id);
      
      if (!sessionResponse.hasActiveSession) {
        setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.');
        return;
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏
      await api.tasks.startWork(pendingTaskId, telegramUser.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCurrentTask(prev => prev ? { ...prev, status: 'in-progress' } : null);
      setTasks(prev => prev.map(task => 
        task.id === pendingTaskId ? { ...task, status: 'in-progress' } : task
      ));
      
      setLocationModalOpen(false);
      setPendingTaskId(null);
      
    } catch (err) {
      console.error('Failed to start work on retry:', err);
      
      if (err.message && err.message.includes('–ª–æ–∫–∞—Ü–∏–µ–π')) {
        setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.');
      } else {
        setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏');
      }
    }
  };

  return {
    // State
    currentView,
    tasks,
    currentTask,
    profile,
    loading,
    error,
    expandedTasks,
    showMap,
    snackbar,
    currentLocation,
    targetLocation,
    route,
    locationModalOpen,
    pendingTaskId,
    hasTaskInProgress,
    inProgressTask,
    
    // Handlers
    handleNavChange,
    handleTaskExpand,
    handleAcceptAssigned,
    handleTakeFree,
    handleStartWork,
    handleCompleteWork,
    handleCloseSnackbar,
    handleLocationModalClose,
    handleLocationModalRetry,
    refreshTasks,
  };
}; 