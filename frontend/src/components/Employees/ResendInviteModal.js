import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Chip,
  CircularProgress,
  Alert,
} from '@mui/material';
import { Telegram, ContentCopy } from '@mui/icons-material';

const ResendInviteModal = ({ show, onClose, onSuccess, employee }) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [copied, setCopied] = useState(false);

  const handleResendInvite = async () => {
    setLoading(true);
    setError('');
    setSuccess('');
    setCopied(false);

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram
      const text = encodeURIComponent(
        `–ü—Ä–∏–≤–µ—Ç! –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n${employee.invite_code}\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ üëâ @arrived_rf_bot –∏ –Ω–∞–∂–º–∏—Ç–µ "Start".\n–ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ ‚Äî –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ.`
      );
      
      const tgLink = `tg://msg_url?url=&text=${text}`;
      const shareLink = `https://t.me/share/url?url=&text=${text}`;
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      try {
        window.location.href = tgLink;
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é
        window.open(shareLink, '_blank');
      }

      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
      onSuccess();
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Telegram');
    } finally {
      setLoading(false);
    }
  };

  const handleCopyCode = async () => {
    try {
      await navigator.clipboard.writeText(employee.invite_code);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
    }
  };

  const handleClose = () => {
    setError('');
    setSuccess('');
    setLoading(false);
    setCopied(false);
    onClose();
  };

  return (
    <Dialog 
      open={show} 
      onClose={handleClose} 
      maxWidth="sm" 
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 2,
        }
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Telegram sx={{ color: 'primary.main' }} />
                  <Typography variant="h6">
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        </Typography>
        </Box>
      </DialogTitle>

      <DialogContent sx={{ pt: 2 }}>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {success && (
          <Alert severity="success" sx={{ mb: 2 }}>
            {success}
          </Alert>
        )}

        <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee?.full_name || employee?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –ø–æ–≤—Ç–æ—Ä–Ω–æ.
        </Typography>

        {employee?.invite_code && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Chip
                label={employee.invite_code}
                variant="outlined"
                sx={{ 
                  fontFamily: 'monospace', 
                  fontSize: '1.1rem',
                  fontWeight: 600,
                  backgroundColor: 'background.paper',
                  borderColor: 'primary.main',
                  color: 'primary.main',
                  flex: 1,
                }}
              />
              <Button
                variant="outlined"
                size="small"
                startIcon={<ContentCopy />}
                onClick={handleCopyCode}
                sx={{ minWidth: 'auto', px: 2 }}
              >
                {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
              </Button>
            </Box>
          </Box>
        )}

        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          <strong>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:</strong>
        </Typography>
        
        <Box sx={{ mb: 2 }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
            1. <strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</strong> –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å Telegram" - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
            2. <strong>–í—Ä—É—á–Ω—É—é:</strong> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ Telegram
          </Typography>
        </Box>

        <Alert severity="info" sx={{ mb: 2 }}>
          –ï—Å–ª–∏ Telegram –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.
        </Alert>
      </DialogContent>

      <DialogActions sx={{ p: 3, pt: 1 }}>
        <Button 
          onClick={handleClose} 
          disabled={loading}
        >
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
        <Button
          onClick={handleResendInvite}
          variant="contained"
          disabled={loading || !employee?.invite_code}
          startIcon={loading ? <CircularProgress size={16} /> : <Telegram />}
        >
          {loading ? '–û—Ç–∫—Ä—ã—Ç–∏–µ Telegram...' : '–û—Ç–∫—Ä—ã—Ç—å Telegram'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ResendInviteModal; 