services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
      - bot
    networks:
      - staging_network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5435:5432"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/1_init.sql
    networks:
      - staging_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
      - ./env.staging
    environment:
      - NODE_ENV=staging
      - REACT_APP_API_URL=https://staging.прибыл.рф/api
      - REACT_APP_BOT_URL=https://staging.прибыл.рф/bot
    depends_on:
      - backend
    networks:
      - staging_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    env_file:
      - ./backend/.env
      - ./env.staging
    environment:
      - NODE_ENV=staging
      - PORT=3003
    depends_on:
      - db
    networks:
      - staging_network
    restart: unless-stopped

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    env_file:
      - ./bot/.env
      - ./env.staging
    environment:
      - NODE_ENV=staging
      - PORT=3004
    depends_on:
      - backend
    networks:
      - staging_network
    restart: unless-stopped

volumes:
  postgres_data_staging:

networks:
  staging_network:
    driver: bridge 