#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/docker-setup.js [environment]
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * 2. –°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑—ã
 * 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
 */

const { execSync } = require('child_process');

const environments = {
  development: {
    name: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    composeFile: 'docker-compose.yml',
    description: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å hot reload'
  },
  staging: {
    name: 'Staging',
    composeFile: 'docker-compose.staging.yml',
    description: 'Staging —Å—Ä–µ–¥–∞ –Ω–∞ dev.–ø—Ä–∏–±—ã–ª.—Ä—Ñ'
  },
  production: {
    name: '–ü—Ä–æ–¥–∞–∫—à–µ–Ω',
    composeFile: 'docker-compose.prod.yml',
    description: '–ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ä–µ–¥–∞ –Ω–∞ –ø—Ä–∏–±—ã–ª.—Ä—Ñ'
  }
};

function dockerSetup(envName) {
  const env = environments[envName];
  if (!env) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞: ${envName}`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: development, staging, production');
    process.exit(1);
  }

  console.log(`üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è —Å—Ä–µ–¥—ã: ${env.name}`);
  console.log(`üìù ${env.description}\n`);

  try {
    // 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    execSync(`node scripts/setup-env.js ${envName}`, { stdio: 'inherit' });
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    try {
      execSync('docker-compose down', { stdio: 'inherit' });
    } catch (e) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 3. –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    console.log('üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...');
    execSync(`docker-compose -f ${env.composeFile} build`, { stdio: 'inherit' });
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    if (envName === 'development') {
      execSync(`docker-compose -f ${env.composeFile} up`, { stdio: 'inherit' });
    } else {
      execSync(`docker-compose -f ${env.composeFile} up -d`, { stdio: 'inherit' });
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:');
    execSync(`docker-compose -f ${env.composeFile} ps`, { stdio: 'inherit' });
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    showDockerInstructions(envName, env);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Docker:', error.message);
    process.exit(1);
  }
}

function showDockerInstructions(envName, env) {
  console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å Docker:\n');
  
  console.log('üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log(`  –ó–∞–ø—É—Å–∫: docker-compose -f ${env.composeFile} up -d`);
  console.log(`  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f ${env.composeFile} down`);
  console.log(`  –õ–æ–≥–∏: docker-compose -f ${env.composeFile} logs -f`);
  console.log(`  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞: docker-compose -f ${env.composeFile} up --build -d`);
  console.log(`  –°—Ç–∞—Ç—É—Å: docker-compose -f ${env.composeFile} ps`);
  
  console.log('\nüîç –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('  –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: docker-compose logs -f [service_name]');
  console.log('  –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker-compose exec [service_name] sh');
  console.log('  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker system prune -a');
  
  switch (envName) {
    case 'development':
      console.log('\nüí° –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
      console.log('- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
      console.log('- –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
      console.log('- –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
      break;
      
    case 'staging':
      console.log('\nüí° –î–ª—è staging:');
      console.log('- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ dev.–ø—Ä–∏–±—ã–ª.—Ä—Ñ');
      console.log('- –õ–æ–≥–∏: docker-compose -f docker-compose.staging.yml logs -f');
      break;
      
    case 'production':
      console.log('\nüí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:');
      console.log('- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
      console.log('- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–∏–±—ã–ª.—Ä—Ñ');
      console.log('- –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f');
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const envName = process.argv[2];

if (!envName || process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/docker-setup.js [environment]');
  console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã:');
  Object.entries(environments).forEach(([key, env]) => {
    console.log(`  ${key.padEnd(12)} - ${env.name}: ${env.description}`);
  });
  console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node scripts/docker-setup.js development');
  console.log('  node scripts/docker-setup.js staging');
  console.log('  node scripts/docker-setup.js production');
  process.exit(0);
}

dockerSetup(envName); 