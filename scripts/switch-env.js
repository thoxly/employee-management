#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ä–µ–¥–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/switch-env.js [environment]
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö .env —Ñ–∞–π–ª–æ–≤
 * 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ä–µ–¥—É
 * 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
 */

const { execSync } = require('child_process');
const path = require('path');

const environments = {
  development: {
    name: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    description: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å ngrok/cloudflare —Ç—É–Ω–Ω–µ–ª—è–º–∏'
  },
  staging: {
    name: 'Staging',
    description: 'Dev —Å—Ä–µ–¥–∞ –Ω–∞ dev.–ø—Ä–∏–±—ã–ª.—Ä—Ñ'
  },
  production: {
    name: '–ü—Ä–æ–¥–∞–∫—à–µ–Ω',
    description: '–ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ä–µ–¥–∞ –Ω–∞ –ø—Ä–∏–±—ã–ª.—Ä—Ñ'
  }
};

function switchEnvironment(envName) {
  const env = environments[envName];
  if (!env) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞: ${envName}`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: development, staging, production');
    process.exit(1);
  }

  console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥—É: ${env.name}`);
  console.log(`üìù ${env.description}\n`);

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    console.log('üîí –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–∏—Ö .env —Ñ–∞–π–ª–æ–≤...');
    execSync('node scripts/backup-env.js', { stdio: 'inherit' });
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ä–µ–¥—É
    console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π —Å—Ä–µ–¥—ã...');
    execSync(`node scripts/setup-env.js ${envName}`, { stdio: 'inherit' });
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    showEnvironmentInstructions(envName);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—ã:', error.message);
    process.exit(1);
  }
}

function showEnvironmentInstructions(envName) {
  console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:\n');
  
  switch (envName) {
    case 'development':
      console.log('üîß –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ngrok: ngrok http 3002');
      console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ cloudflare tunnel –¥–ª—è backend');
      console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ TELEGRAM_WEBHOOK_URL –≤ .env');
      console.log('4. –û–±–Ω–æ–≤–∏—Ç–µ REACT_APP_TELEGRAM_API_URL –≤ frontend/.env');
      console.log('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up');
      break;
      
    case 'staging':
      console.log('üîß –î–ª—è staging —Å—Ä–µ–¥—ã:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dev.–ø—Ä–∏–±—ã–ª.—Ä—Ñ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ nginx');
      console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã');
      console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–∞—Ö');
      console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–∏ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç');
      console.log('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f docker-compose.staging.yml up -d');
      break;
      
    case 'production':
      console.log('üîß –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–±—ã–ª.—Ä—Ñ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ nginx');
      console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã');
      console.log('3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ');
      console.log('4. –û–±–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–∞—Ö');
      console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–∏ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –∏ AWS S3');
      console.log('6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f docker-compose.prod.yml up -d');
      break;
  }
  
  console.log('\nüí° –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏–∑ –ø–∞–ø–∫–∏ env-backup-*');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const envName = process.argv[2];

if (!envName || process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/switch-env.js [environment]');
  console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã:');
  Object.entries(environments).forEach(([key, env]) => {
    console.log(`  ${key.padEnd(12)} - ${env.name}: ${env.description}`);
  });
  console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node scripts/switch-env.js development');
  console.log('  node scripts/switch-env.js staging');
  console.log('  node scripts/switch-env.js production');
  process.exit(0);
}

switchEnvironment(envName); 