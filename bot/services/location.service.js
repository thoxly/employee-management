const db = require('../db');

class LocationService {
    constructor() {
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.lastLocationUpdate = new Map(); // telegramId -> timestamp
        // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏
        this.connectionMonitor = null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
     * @returns {Promise<Object|null>} - –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∏–ª–∏ null
     */
    async getActiveSession(userId) {
        try {
            const query = `
                SELECT id, user_id, task_id, start_time, end_time, is_active
                FROM sessions 
                WHERE user_id = $1 AND is_active = true
                ORDER BY start_time DESC
                LIMIT 1
            `;
            
            const result = await db.query(query, [userId]);
            return result.rows.length > 0 ? result.rows[0] : null;
        } catch (error) {
            console.error('‚ùå Error in getActiveSession:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
     * @param {number|null} taskId - ID –∑–∞–¥–∞—á–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è live-–ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–¥–∞—á–∏)
     * @returns {Promise<Object>} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    async createSession(userId, taskId = null) {
        try {
            const query = `
                INSERT INTO sessions (user_id, task_id, start_time, is_active)
                VALUES ($1, $2, CURRENT_TIMESTAMP, true)
                RETURNING id, user_id, task_id, start_time, is_active
            `;
            
            const result = await db.query(query, [userId, taskId]);
            console.log(`‚úÖ Created session for user ${userId}, task ${taskId}`);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in createSession:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å task_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
     * @returns {Promise<Object>} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    async updateSessionTask(sessionId, taskId) {
        try {
            const query = `
                UPDATE sessions 
                SET task_id = $2, updated_at = CURRENT_TIMESTAMP
                WHERE id = $1
                RETURNING id, user_id, task_id, start_time, is_active
            `;
            
            const result = await db.query(query, [sessionId, taskId]);
            console.log(`‚úÖ Updated session ${sessionId} with task ${taskId}`);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in updateSessionTask:', error);
            throw error;
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    async deactivateSession(sessionId) {
        try {
            const query = `
                UPDATE sessions 
                SET is_active = false, updated_at = CURRENT_TIMESTAMP
                WHERE id = $1
                RETURNING id, user_id, task_id, start_time, is_active
            `;
            
            const result = await db.query(query, [sessionId]);
            console.log(`üî¥ Deactivated session ${sessionId}`);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in deactivateSession:', error);
            throw error;
        }
    }

    /**
     * –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    async reactivateSession(sessionId) {
        try {
            const query = `
                UPDATE sessions 
                SET is_active = true, updated_at = CURRENT_TIMESTAMP
                WHERE id = $1
                RETURNING id, user_id, task_id, start_time, is_active
            `;
            
            const result = await db.query(query, [sessionId]);
            console.log(`üü¢ Reactivated session ${sessionId}`);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in reactivateSession:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    async endSession(sessionId) {
        try {
            const query = `
                UPDATE sessions 
                SET end_time = CURRENT_TIMESTAMP, is_active = false, updated_at = CURRENT_TIMESTAMP
                WHERE id = $1
                RETURNING id, user_id, task_id, start_time, end_time, is_active
            `;
            
            const result = await db.query(query, [sessionId]);
            console.log(`üèÅ Ended session ${sessionId}`);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in endSession:', error);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @param {number} latitude - –®–∏—Ä–æ—Ç–∞
     * @param {number} longitude - –î–æ–ª–≥–æ—Ç–∞
     * @param {Date} timestamp - –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
     * @returns {Promise<Object>} - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    async savePosition(userId, sessionId, latitude, longitude, timestamp = new Date()) {
        try {
            const query = `
                INSERT INTO positions (user_id, session_id, latitude, longitude, timestamp)
                VALUES ($1, $2, $3, $4, $5)
                RETURNING id, user_id, session_id, latitude, longitude, timestamp
            `;
            
            const result = await db.query(query, [userId, sessionId, latitude, longitude, timestamp]);
            console.log(`üìç Saved position for user ${userId}, session ${sessionId}`);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in savePosition:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
     * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateLastLocationTime(telegramId) {
        this.lastLocationUpdate.set(telegramId, Date.now());
        console.log(`üïê Updated last location time for user ${telegramId}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
     * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {number|null} - Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ null
     */
    getLastLocationTime(telegramId) {
        return this.lastLocationUpdate.get(telegramId) || null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} timeoutMinutes - –¢–∞–π–º–∞—É—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
     * @returns {boolean} - true –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
     */
    isLocationTimeout(telegramId, timeoutMinutes = 3) {
        const lastUpdate = this.getLastLocationTime(telegramId);
        if (!lastUpdate) return false;
        
        const now = Date.now();
        const diffMinutes = (now - lastUpdate) / (1000 * 60);
        return diffMinutes > timeoutMinutes;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç—É—Å–µ "in-progress"
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
     * @returns {Promise<Object|null>} - –ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ null
     */
    async getUserActiveTask(userId) {
        try {
            const query = `
                SELECT id, title, description, status
                FROM tasks 
                WHERE assigned_to = $1 AND status = 'in-progress'
                ORDER BY created_at DESC
                LIMIT 1
            `;
            
            const result = await db.query(query, [userId]);
            return result.rows.length > 0 ? result.rows[0] : null;
        } catch (error) {
            console.error('‚ùå Error in getUserActiveTask:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID —Å–µ—Å—Å–∏–∏
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object|null>} - –ó–∞–¥–∞—á–∞ –∏–ª–∏ null
     */
    async getTaskBySessionId(sessionId) {
        try {
            const query = `
                SELECT t.id, t.title, t.description, t.status
                FROM tasks t
                JOIN sessions s ON t.id = s.task_id
                WHERE s.id = $1
            `;
            
            const result = await db.query(query, [sessionId]);
            return result.rows.length > 0 ? result.rows[0] : null;
        } catch (error) {
            console.error('‚ùå Error in getTaskBySessionId:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏
     * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
     */
    startConnectionMonitoring(bot) {
        // –¢–ï–°–¢–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (–±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):
        // - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 15 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ 60)
        // - –¢–∞–π–º–∞—É—Ç –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏: 15 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ 3 –º–∏–Ω—É—Ç)
        //
        // –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞):
        // - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 60 —Å–µ–∫—É–Ω–¥
        // - –¢–∞–π–º–∞—É—Ç –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏: 3 –º–∏–Ω—É—Ç—ã
        //
        // TODO: –í–µ—Ä–Ω—É—Ç—å –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.connectionMonitor = setInterval(async () => {
            console.log('üîç Checking connection status...');
            
            for (const [telegramId, lastUpdate] of this.lastLocationUpdate.entries()) {
                // –¢–ï–°–¢: 15 —Å–µ–∫—É–Ω–¥ = 0.25 –º–∏–Ω—É—Ç—ã
                // TODO: –í–µ—Ä–Ω—É—Ç—å –Ω–∞ 3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (this.isLocationTimeout(telegramId, 0.25)) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                        const userService = require('./user.service');
                        const user = await userService.getUserByTelegramId(telegramId);
                        
                        if (!user) continue;
                        
                        const activeSession = await this.getActiveSession(user.id);
                        if (!activeSession) continue;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const activeTask = await this.getUserActiveTask(user.id);
                        
                        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
                        await this.deactivateSession(activeSession.id);
                        
                        if (activeTask) {
                            // –ö–µ–π—Å 1: –ï—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∑–∞–¥–∞—á–∞ - –∫—Ä–∏—Ç–∏—á–Ω–æ
                            await bot.telegram.sendMessage(
                                telegramId,
                                '‚ö†Ô∏è **–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞!**\n\n' +
                                `**${activeTask.title}**\n` +
                                `${activeTask.description || ''}\n\n` +
                                '‚ùå –ú—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–≤—è–∑—å —Å –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–µ–π.\n' +
                                'üìç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å live-–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.'
                            );
                        } else {
                            // –ö–µ–π—Å 2: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                            await bot.telegram.sendMessage(
                                telegramId,
                                'üõë –†–µ–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.'
                            );
                        }
                        
                        console.log(`‚ö†Ô∏è Connection lost for user ${telegramId}, session ${activeSession.id} deactivated`);
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        this.lastLocationUpdate.delete(telegramId);
                        
                    } catch (error) {
                        console.error(`‚ùå Error checking connection for user ${telegramId}:`, error);
                    }
                }
            }
        }, 15000); // –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        // TODO: –í–µ—Ä–Ω—É—Ç—å –Ω–∞ 60000 (60 —Å–µ–∫—É–Ω–¥) –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        console.log('üéØ Connection monitoring started');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏
     */
    stopConnectionMonitoring() {
        if (this.connectionMonitor) {
            clearInterval(this.connectionMonitor);
            this.connectionMonitor = null;
            console.log('üõë Connection monitoring stopped');
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
     * @param {number} taskId - ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
     * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
     */
    async endSessionsForTask(taskId) {
        try {
            const query = `
                UPDATE sessions 
                SET end_time = CURRENT_TIMESTAMP, is_active = false, updated_at = CURRENT_TIMESTAMP
                WHERE task_id = $1 AND is_active = true
                RETURNING id, user_id, task_id, start_time, end_time
            `;
            
            const result = await db.query(query, [taskId]);
            console.log(`üèÅ Ended ${result.rows.length} sessions for task ${taskId}`);
            return result.rows;
        } catch (error) {
            console.error('‚ùå Error in endSessionsForTask:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏–∏
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
     */
    async getSessionStats(sessionId) {
        try {
            const query = `
                SELECT 
                    s.id,
                    s.user_id,
                    s.task_id,
                    s.start_time,
                    s.end_time,
                    s.is_active,
                    COUNT(p.id) as position_count,
                    MIN(p.timestamp) as first_position,
                    MAX(p.timestamp) as last_position,
                    u.full_name as user_name,
                    t.title as task_title
                FROM sessions s
                LEFT JOIN positions p ON s.id = p.session_id
                LEFT JOIN users u ON s.user_id = u.id
                LEFT JOIN tasks t ON s.task_id = t.id
                WHERE s.id = $1
                GROUP BY s.id, s.user_id, s.task_id, s.start_time, s.end_time, s.is_active, u.full_name, t.title
            `;
            
            const result = await db.query(query, [sessionId]);
            return result.rows[0] || null;
        } catch (error) {
            console.error('‚ùå Error in getSessionStats:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
     * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    async getUserRecentPositions(userId, limit = 10) {
        try {
            const query = `
                SELECT 
                    p.latitude,
                    p.longitude,
                    p.timestamp,
                    s.id as session_id,
                    t.title as task_title
                FROM positions p
                JOIN sessions s ON p.session_id = s.id
                LEFT JOIN tasks t ON s.task_id = t.id
                WHERE p.user_id = $1
                ORDER BY p.timestamp DESC
                LIMIT $2
            `;
            
            const result = await db.query(query, [userId, limit]);
            return result.rows;
        } catch (error) {
            console.error('‚ùå Error in getUserRecentPositions:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
     */
    async isWorkingHours(userId) {
        try {
            const query = `
                SELECT c.work_start_time, c.work_end_time
                FROM users u
                JOIN companies c ON u.company_id = c.id
                WHERE u.id = $1
            `;
            
            const result = await db.query(query, [userId]);
            if (result.rows.length === 0) return false;

            const { work_start_time, work_end_time } = result.rows[0];
            const now = new Date();
            const currentTime = now.toTimeString().slice(0, 8); // HH:MM:SS format

            return currentTime >= work_start_time && currentTime <= work_end_time;
        } catch (error) {
            console.error('‚ùå Error in isWorkingHours:', error);
            return false;
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
     * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
     * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} task - –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
     */
    async notifyTaskStarted(bot, telegramId, task) {
        try {
            const message = `üìã **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞:**\n\n` +
                `**${task.title}**\n` +
                `${task.description || ''}\n\n` +
                `üìç –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å live-–ª–æ–∫–∞—Ü–∏–µ–π:\n` +
                `1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É (üìé)\n` +
                `2. –í—ã–±–µ—Ä–∏—Ç–µ "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è"\n` +
                `3. –í–∫–ª—é—á–∏—Ç–µ "–ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"\n` +
                `4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"`;

            await bot.telegram.sendMessage(telegramId, message);
            console.log(`üì® Task notification sent to user ${telegramId} for task ${task.id}`);
        } catch (error) {
            console.error(`‚ùå Error sending task notification to ${telegramId}:`, error);
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞–¥–∞—á—É –∫ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
     * @param {number} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
     * @returns {Promise<Object>} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    async attachTaskToSession(sessionId, taskId) {
        try {
            const query = `
                UPDATE sessions
                SET task_id = $1,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = $2
                RETURNING *
            `;
            
            const result = await db.query(query, [taskId, sessionId]);
            return result.rows[0];
        } catch (error) {
            console.error('‚ùå Error in attachTaskToSession:', error);
            throw error;
        }
    }
}

module.exports = new LocationService(); 