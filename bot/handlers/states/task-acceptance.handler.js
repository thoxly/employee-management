const taskService = require('../../services/task.service');
const locationService = require('../../services/location.service');
const stateService = require('../../services/state.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @param {Object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
 */
const handleTaskAcceptance = async (ctx, taskId) => {
    try {
        const userId = ctx.from.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        const activeTasksCount = await taskService.getUserTasksCount(userId, 'in-progress');
        if (activeTasksCount > 0) {
            return await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤—É—é.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const activeSession = await locationService.getActiveSession(userId);
        
        if (!activeSession) {
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
            await stateService.setState(userId, 'AWAITING_LOCATION', { pendingTaskId: taskId });
            
            return await ctx.reply(`üìç –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É live-–ª–æ–∫–∞—Ü–∏–∏:

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É (üìé)
2. –í—ã–±–µ—Ä–∏—Ç–µ "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è"
3. –í–∫–ª—é—á–∏—Ç–µ "–ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é" 
4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"`);
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É
        const task = await taskService.getTaskById(taskId);
        if (!task) {
            return await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await taskService.updateTaskStatus(taskId, 'in-progress', userId);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        await locationService.attachTaskToSession(activeSession.id, taskId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏
        await ctx.reply(`‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!

üì± –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å ',
                            web_app: { url: process.env.MINI_APP_URL  }
                        }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('Error in handleTaskAcceptance:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

module.exports = {
    handleTaskAcceptance
}; 