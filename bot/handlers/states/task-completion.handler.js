const taskService = require('../../services/task.service');
const locationService = require('../../services/location.service');
const stateService = require('../../services/state.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {string} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
const handleTaskCompletion = async (ctx, taskId, result) => {
    try {
        const telegramId = ctx.from.id;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const userService = require('../../services/user.service');
        const user = await userService.getUserByTelegramId(telegramId);
        if (!user) {
            return await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const task = await taskService.getTaskById(taskId);
        if (!task) {
            return await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (task.assigned_to !== user.id) {
            return await ctx.reply('‚ùå –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ in-progress
        if (task.status !== 'in-progress') {
            return await ctx.reply('‚ùå –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç–µ.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (!result || !result.trim()) {
            return await ctx.reply('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.');
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const client = await require('../../db').connect();
        try {
            await client.query('BEGIN');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            const updateTaskQuery = `
                UPDATE tasks 
                SET status = 'completed', 
                    result = $1,
                    completed_at = CURRENT_TIMESTAMP,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = $2 AND assigned_to = $3
                RETURNING *
            `;
            
            const taskResult = await client.query(updateTaskQuery, [result, taskId, user.id]);
            
            if (taskResult.rows.length === 0) {
                await client.query('ROLLBACK');
                return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É.');
            }

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            const endSessionQuery = `
                UPDATE sessions 
                SET end_time = CURRENT_TIMESTAMP, is_active = false, updated_at = CURRENT_TIMESTAMP
                WHERE task_id = $1 AND user_id = $2 AND is_active = true
                RETURNING id
            `;
            
            const sessionResult = await client.query(endSessionQuery, [taskId, user.id]);
            console.log(`üèÅ Ended ${sessionResult.rows.length} sessions for completed task ${taskId}`);

            await client.query('COMMIT');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await ctx.reply(
                `‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}\n\n` +
                `üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ ${new Date().toLocaleString('ru-RU')}`
            );

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('Error in handleTaskCompletion:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 */
const handleTaskCancellation = async (ctx, taskId) => {
    try {
        const telegramId = ctx.from.id;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const userService = require('../../services/user.service');
        const user = await userService.getUserByTelegramId(telegramId);
        if (!user) {
            return await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const task = await taskService.getTaskById(taskId);
        if (!task) {
            return await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –æ—Ç–º–µ–Ω—ã.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (task.assigned_to !== user.id) {
            return await ctx.reply('‚ùå –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ in-progress
        if (task.status !== 'in-progress') {
            return await ctx.reply('‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç–µ.');
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const client = await require('../../db').connect();
        try {
            await client.query('BEGIN');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            const updateTaskQuery = `
                UPDATE tasks 
                SET status = 'cancelled', 
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = $1 AND assigned_to = $2
                RETURNING *
            `;
            
            const taskResult = await client.query(updateTaskQuery, [taskId, user.id]);
            
            if (taskResult.rows.length === 0) {
                await client.query('ROLLBACK');
                return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.');
            }

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            const endSessionQuery = `
                UPDATE sessions 
                SET end_time = CURRENT_TIMESTAMP, is_active = false, updated_at = CURRENT_TIMESTAMP
                WHERE task_id = $1 AND user_id = $2 AND is_active = true
                RETURNING id
            `;
            
            const sessionResult = await client.query(endSessionQuery, [taskId, user.id]);
            console.log(`üèÅ Ended ${sessionResult.rows.length} sessions for cancelled task ${taskId}`);

            await client.query('COMMIT');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
            await ctx.reply(
                `‚ùå –ó–∞–¥–∞—á–∞ "${task.title}" –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n` +
                `üïê –û—Ç–º–µ–Ω–µ–Ω–∞ –≤ ${new Date().toLocaleString('ru-RU')}`
            );

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('Error in handleTaskCancellation:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

module.exports = {
    handleTaskCompletion,
    handleTaskCancellation
}; 