const stateService = require('../services/state.service');
const fetch = require('node-fetch');
const userService = require('../services/user.service'); // Added missing import

class FSMHandler {
    constructor() {
        this.states = {};
        this.commands = {};
        console.log('üîÑ FSM Handler initialized');
    }

    // Register state handler
    state(stateName, handler) {
        console.log('üìù Registering state handler:', stateName);
        this.states[stateName] = handler;
        return this;
    }

    // Register command handler
    command(commandName, handler) {
        console.log('üìù Registering command handler:', commandName);
        this.commands[commandName] = {
            handler
        };
        return this;
    }

    // Handle incoming update
    async handleUpdate(ctx) {
        const userId = ctx.from.id;
        console.log('üë§ Processing update for user:', userId);
        
        const currentState = await stateService.getUserState(userId);
        console.log('üîç Current user state:', currentState?.state || 'NO_STATE');

        // Handle commands first
        if (ctx.message?.text?.startsWith('/')) {
            const command = ctx.message.text.split(' ')[0].substring(1);
            console.log('üéØ Detected command:', command);
            
            if (this.commands[command]) {
                console.log('‚ú® Found handler for command:', command);
                const { handler } = this.commands[command];
                
                // Clear current state before handling command
                if (currentState) {
                    await this.clearState(ctx);
                }
                
                // Execute command handler
                return await handler(ctx, null);
            } else {
                console.log('‚ùå No handler found for command:', command);
                return await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.');
            }
        }

        // Handle state if no command matched
        if (currentState && this.states[currentState.state]) {
            console.log('üîÑ Processing state handler for:', currentState.state);
            return await this.states[currentState.state](ctx, currentState);
        }

        // Handle invite code for unregistered users
        if (!currentState && ctx.message?.text && !ctx.message.text.startsWith('/')) {
            console.log('üîë Processing potential invite code');
            const user = await userService.getUserByTelegramId(ctx.from.id);
            
            if (user) {
                // User is registered but not in any state
                const manager = user.manager_telegram_username || user.manager_email;
                const contactInfo = manager ? 
                    `–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: ${user.manager_telegram_username ? '@' + user.manager_telegram_username : user.manager_email}` :
                    '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã';
                
                return await ctx.reply(`üëã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n${contactInfo}`);
            } else {
                // Unregistered user - handle invite code
                return await this.handleInviteCode(ctx);
            }
        }

        // Default handler for stateless messages
        console.log('‚û°Ô∏è Using default stateless message handler');
        return await this.handleStatelessMessage(ctx);
    }

    // Handle messages when no state is set
    async handleStatelessMessage(ctx) {
        const user = await userService.getUserByTelegramId(ctx.from.id);
        
        if (user) {
            const manager = user.manager_telegram_username || user.manager_email;
            const contactInfo = manager ? 
                `–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: ${user.manager_telegram_username ? '@' + user.manager_telegram_username : user.manager_email}` :
                '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã';
            
            return await ctx.reply(`üëã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n${contactInfo}`);
        } else {
            return await ctx.reply('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∏–Ω–≤–∞–π—Ç-–∫–æ–¥.');
        }
    }

    // Helper to transition to a new state
    async transition(ctx, newState) {
        const userId = ctx.from.id;
        console.log(`üîÑ Transitioning user ${userId} to state:`, newState);
        await stateService.setState(userId, newState);
    }

    // Helper to clear state
    async clearState(ctx) {
        const userId = ctx.from.id;
        console.log(`üóëÔ∏è Clearing state for user:`, userId);
        await stateService.clearState(userId);
    }

    // Helper to update state data - —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async updateStateData(ctx, data) {
        const userId = ctx.from.id;
        console.log(`üìù Updating state data for user ${userId}:`, data);
        return await stateService.updateStateData(userId, data);
    }

    // Handle invite code for unregistered users
    async handleInviteCode(ctx) {
        const text = ctx.message.text.trim();
        const inviteCodePattern = /^[A-Za-z0-9]{6,20}$/;
        
        if (!inviteCodePattern.test(text)) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }

        const processingMsg = await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω–≤–∞–π—Ç-–∫–æ–¥...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            const { id: telegramId, first_name: firstName, last_name: lastName, username, language_code, is_premium } = ctx.from;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
            const backendUrl = `${process.env.BACKEND_URL || 'http://localhost:3003'}/api/auth/validate-invite`;
            const validateResponse = await fetch(backendUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ inviteCode: text })
            });

            const validateResult = await validateResponse.json();

            if (!validateResponse.ok) {
                await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);
                return ctx.reply(`‚ùå ${validateResult.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞'}`);
            }

            // –ï—Å–ª–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const registerUrl = `${process.env.BACKEND_URL || 'http://localhost:3003'}/api/auth/register/invite`;
            const registerResponse = await fetch(registerUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    inviteCode: text,
                    telegramId,
                    firstName,
                    lastName,
                    username,
                    language_code,
                    is_premium,
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
                    ...ctx.from
                })
            });

            await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);

            const registerResult = await registerResponse.json();

            if (registerResponse.ok) {
                // –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await this.transition(ctx, 'REGISTERED', { user: registerResult.user });

                // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ backend/controllers/auth.controller.js
                return ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            } else {
                return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

${registerResult.message}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
            }
        } catch (error) {
            console.error('Error processing invite:', error);
            await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);
            return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}

module.exports = new FSMHandler(); 